[["index.html", "A primer in Human Cardiovascular Genetics Chapter 1 About this primer 1.1 Introduction 1.2 Background reading 1.3 Meet the Team 1.4 Final thoughts", " A primer in Human Cardiovascular Genetics dr. Sander W. van der Laan Version 1.0.0 | last update: 2022-03-28 Chapter 1 About this primer 1.1 Introduction Welcome to the A primer in Human Cardiovascular Genetics as part of the Genetic Epidemiology course. In the next few days we will use this GitBook to perform quality control (QC), executing a genome-wide association study (GWAS), annotating the GWAS results, and performing further downstream analyses. We will use data from the first release of the Welcome Trust Case-Control Consortium (WTCCC) and focus on coronary artery disease (CAD). Unfortunately, during this course there is no time to perform imputation, but I will provide some pointers during the course as to how to do this with minimal coding/scripting experience. Likewise, this practical does not cover the aspects of meta-analyses of GWAS. But rest assured, I will add chapters on these subjects to a future version. 1.2 Background reading Part of this is based on four great Nature Protocols from the Zondervan group at the Wellcome Center Human Genetics. Zondervan KT et al. Designing candidate gene and genome-wide case-control association studies. Nat Protoc 2007. Pettersson FH et al. Marker selection for genetic case-control association studies. Nat Protoc 2009. Anderson CA et al. Data QC in genetic case-control association studies. Nat Protoc 2010. Clarke GM et al. Basic statistical analysis in genetic case-control studies. Nat Protoc 2011. An update on the community standards of QC for GWAS can be found here: Laurie CC et al. Quality control and quality assurance in genotypic data for genome-wide association studies. Genet Epidemiol 2010. With respect to imputation you should also get familiar with the following two works: Marchini, J. and Howie, B. Genotype imputation for genome-wide association studies. Nat Rev Genet 2010 de Bakker PIW et al. Practical aspects of imputation-driven meta-analysis of genome-wide association studies. Hum Mol Genet 2008. Winkler TW et al. Quality control and conduct of genome-wide association meta-analyses. Nat Protoc 2014. 1.3 Meet the Team We work with a team of enthusiastic lecturers with experience in bioinformatics, GWAS, genetic analyses, Mendelian randomization, and epidemiology. This year the team consists of: Sander W. van der Laan Assistant professorCourse coordinators.w.vanderlaan-2@umcutrecht.nl | swvanderlaan Charlotte Onland-Moret Associate ProfessorN.C.Onland@umcutrecht.nl | nconland Jessica van Setten Assistant professorj.vansetten@umcutrecht.nl | j_vansetten 1.4 Final thoughts I can imagine this seems overwhelming, but trust me, you’ll be okay. Just follow this practical, but also work on the questions asked during the lectures and in this practical. You’ll learn by doing and at the end of the day, you can execute a GWAS independently. Ready to start? Your first point of action is to prepare your system for this course (Chapter 2). "],["prerequisites.html", "Chapter 2 Prerequisites 2.1 Linux, macOS, and Windows 2.2 Programs you need 2.3 The Terminal 2.4 Installing some R packages 2.5 Are you ready?", " Chapter 2 Prerequisites 2.1 Linux, macOS, and Windows Most programs made to execute genetic epidemiology studies are developed for the Unix environment, for example Linux and macOS. So, they may not work as intended in a Windows environment. Windows does allow users to install a linux subsystem within Windows 10 and you can find the detail guide here. However, I highly recommend to 1) either install a linux subsystem on your Windows computer (for example a virtual machine with Ubuntu could work), or 2) switch to macOS in combination with homebrew. This will give you all the flexibility to use Unix-based programs for your genetic epidemiology work and at the same time you’ll keep the advantage of a powerful computer with a user-friendly interface (either Windows or macOS). For this practical we use a Windows laptop with Ubuntu on a VirtualMachine. Therefore every command is intended for Linux/macOS, in other words Unix-systems. 2.2 Programs you need You need few programs for this practical, or for your (future) genetic epidemiology work for that matter (Table 1). Program Link Description PLINK https://www.cog-genomics.org/plink2/ PLINK is a free, open-source genetic analysis tool set, designed to perform a range of basic data parsing and quality control, as well as basic and large-scale analyses in a computationally efficient manner. R https://cran.r-project.org/ A program to perform statistical analysis and visualizations. RStudio https://www.rstudio.com A user-friendly R-wrap-around for code editing, debugging, analyses, and visualization. Homebrew https://brew.sh A great extension for Mac-users to install really useful programs that Apple didn’t. Table 1: Programs needed for genetic epidemiology. All genetic analyses can be done in PLINK, even on your laptop, but with large datasets, for example UK Biobank size, it is better to switch to a high-performance computing cluster like we have available at the Utrecht Science Park. Nowadays, a lot of people also use programs like SNPTEST, BOLT-LMM, GCTA, or regenie as alternatives to execute GWAS and downstream analyses, for example heritability estimation, Fst-calculation, and so on. Mendelian randomization can be done either with the SMR or GSMR function from GCTA, or with R-packages, like TwoSampleMR. 2.3 The Terminal For all the above programs, except RStudio, you will need the Terminal. This comes with every major operating system; on Windows it is called ‘PowerShell’, but let’s not go there. And regardless, you will (have to start to) make your own scripts. The benefit of using scripts is that each step in your workflow is clearly stipulated and annotated, and it allows for greater reproducibility, easier troubleshooting, and scaling up to high-performance computer clusters. Open the terminal, it should be on the left in the toolbar as a little black computer-monitor-like icon. Mac users can type command + space and type terminal, a terminal screen should open. From now on we will use little code blocks like the example to indicate a code you should type/copy-paste and hit enter. If a code is followed by a comment, it is indicated by a # - you don’t need to copy-paste and execute this. CODE BLOCK CODE BLOCK # some comment here 2.3.1 Download the data First, let’s start by downloading the data you need for this course to your Desktop: LINK. Alternatively, you could do this through this command. This will create a directory on your Desktop with the command mkdir. The -v flag indicates the program should be verbose, meaning it should tell you what it is doing. mkdir -v ~/Desktop/practical/ wget &quot;https://www.dropbox.com/sh/kumfwm7drt2flhp/AAB5n0OcUvJixI9pNiymx6-La?dl=0&quot; -P ~/Desktop/practical/ 2.3.2 Navigating the Terminal You can navigate around the computer through the terminal by typing cd &lt;path&gt;; cd stands for “change directory” and means “some_file_directory_you_want_to_go_to”. # For Linux/macOS Users cd ~ # will bring you to your home directory cd ../ # will bring you to the parent directory (up one level) cd XXX # will bring you to the XXX directory Let’s navigate to the folder you just downloaded. cd ~/Desktop/practical Let’s check out what is inside the directory, by listing (ls) its contents. ls -lh # For Linux/macOS Users ls -l # shows files as list ls -lh # shows files as list with human readable format ls -lt # shows the files as list sorted by time edited ls -lS # shows the files as list sorted by size Adding the flags -lh will get you the contents of a directory in a list (-l) and make the size ‘human-readable’ (-h). You can also count the number of files. ls | wc -l 2.4 Installing some R packages I tested this VirtualMachine and everything should be fine, except some libraries weren’t there. We need to install them. To be able to install certain r-packages, we need to install some Linux (Ubuntu) software. Type the following: sudo apt-get install libcurl4 libcurl4-openssl-dev -y sudo apt-get install libssl-dev Now close the terminal window - really making sure that the terminal-program has quit. Open a new terminal window and open r by simply typing R or r. You should install the following packages, and then you’re good to go! install.packages(c(&quot;httr&quot;, &quot;usethis&quot;, &quot;data.table&quot;, &quot;devtools&quot;, &quot;qqman&quot;, &quot;CMplot&quot;, &quot;tibble&quot;, &quot;plotly&quot;, &quot;dplyr&quot;)) devtools::install_github(&quot;kassambara/ggpubr&quot;) You should load these packages too. library(&quot;ggpubr&quot;) library(&quot;httr&quot;) library(&quot;usethis&quot;) library(&quot;data.table&quot;) library(&quot;devtools&quot;) library(&quot;qqman&quot;) library(&quot;CMplot&quot;) library(&quot;tibble&quot;) library(&quot;plotly&quot;) library(&quot;dplyr&quot;) All in all this may take some time, good moment to relax, review your notes, stretch your legs, or take a coffee. 2.5 Are you ready? Are you ready? Did you bring coffee and a good dose of energy? Let’s start! We first cover some basics in (Chapter @ref(gwas_basics)). "],["basics-of-a-genome-wide-association-study-gwas.html", "Chapter 3 Basics of a Genome-Wide Association Study (GWAS) 3.1 Converting datasets 3.2 Quality control 3.3 Let’s get our hands dirty", " Chapter 3 Basics of a Genome-Wide Association Study (GWAS) Now that you understand a bit of the navigation in Unix-systems, we will continue with the practical. We will make use of a dummy dataset containing cases and controls. We will explain and execute the following steps: convert raw data to a more memory-efficient format apply extensive quality control on samples and SNPs assess the ancestral background of your study population perform association testing visualize association results 3.1 Converting datasets The format in which genotype data are returned to investigators varies among genome-wide SNP platforms and genotyping centers. Usually genotypes have been called by a genotyping center and returned in the standard PED and MAP file formats. A PED file is a white space (space or tab)-delimited file in which each line represents one individual and the first six columns are mandatory and in the following order: ‘Family ID’, ‘Individual ID’, ‘Paternal ID’, ‘Maternal ID’, ‘Sex (1=male, 2=female, 0=missing)’, and ‘Phenotype (1=unaffected, 2=affected, 0=missing)’. The subsequent columns denote genotypes that can be any character (e.g., 1, 2, 3, 4 or A, C, G, T). Zero denotes a missing genotype. Each SNP must have two alleles (i.e., both alleles are either present or absent). The order of SNPs in the PED file is given in the MAP file, in which each line denotes a single marker and the four white-space–separated columns are chromosome (1–22, X, Y or 0 for unplaced), marker name (typically an rs number), genetic distance in Morgans (this can be fixed to 0) and base-pair position (bp units). Let’s start by using PLINK to converting the datasets to a lighter, binary form (a BED-file). BED files save data in a more memory- and time-efficient manner (binary files) to facilitate the analysis of large-scale data sets@purcell2007. PLINK creates a .log file (named raw-GWA-data.log) that details (among other information) the implemented commands, the number of cases and controls in the input files, any excluded data and the genotyping rate in the remaining data. This file is very useful for checking whether the software is successfully completing commands. Make sure you are in the right directory. Do you remember how to get there? cd ~/Desktop/practical No worries for now: I’ve done this already for you! plink --file rawdata/raw-GWA-data --make-bed --out rawdata/rawdata 3.2 Quality control We are ready for some quality control and quality assurance, heavily inspired by Anderson et al.@anderson2010 and Laurie et al.@laurie2010. In general, we should check out a couple of things regarding the data quality on two levels: samples variants So, we will investigate the following: Are the sexes based on genetic data matching the ones given by the phenotype file? Identify individuals that are outliers in terms of missing data (call rate) or heterozygosity rates. This could indicate a genotyping error or sample swap. Identify duplicated or related individuals. Identify individuals with divergent ancestry. What are the allele frequencies? What is the per-SNP call rate? In the case of a case-control study (which is the case here), we need to check differential missingness between cases and controls. By the way: you could extent this to for instance ‘genotyping platform’, or ‘hospital of inclusion’, if you think this might influence the genotyping experiment technically. 3.3 Let’s get our hands dirty All clear? Let’s start the work. On to step 1 of the QC for GWAS: filter samples of poor quality in (Chapter @ref(gwas_basics_sample_qc)). "],["sample-qc.html", "Chapter 4 Sample QC 4.1 Sex 4.2 Sample Callrates 4.3 Heterozygosity rate 4.4 Relatedness 4.5 Ancestral background 4.6 Removing samples 4.7 The next step", " Chapter 4 Sample QC Let’s start with the per-sample quality control. 4.1 Sex We need to identify of individuals with discordant sex information comparing phenotypic and genotypic data. Let’s calculate the mean homozygosity rate across X-chromosome markers for each individual in the study. plink --bfile rawdata/rawdata --check-sex --out rawdata/rawdata This produces a file with the following columns: FID Family ID IID Within-family ID PEDSEX Sex code in input file SNPSEX Imputed sex code (1 = male, 2 = female, 0 = unknown) STATUS ‘OK’ if PEDSEX and SNPSEX match and are nonzero, ‘PROBLEM’ otherwise F Inbreeding coefficient, considering only X chromosome. Not present with ‘y-only’. YCOUNT Number of nonmissing genotype calls on Y chromosome. Requires ‘ycount’/‘y-only’. We need to get a list of individuals with discordant sex data. cat rawdata/rawdata.sexcheck | awk &#39;$5 ==&quot;STATUS&quot; || $5 ==&quot;PROBLEM&quot;&#39; &gt; rawdata/rawdata.sexprobs.txt Let’s have a look at the results. cat rawdata/rawdata.sexprobs.txt sexissues &lt;- data.table::fread(paste0(COURSE_loc,&quot;/rawdata/rawdata.sexprobs.txt&quot;)) knitr::kable(sexissues, caption = &quot;Sex issues&quot;) Table 4.1: Sex issues FID IID PEDSEX SNPSEX STATUS F 772 772 2 0 PROBLEM 0.3084 853 853 2 0 PROBLEM 0.3666 1920 1920 2 0 PROBLEM 0.4066 When the homozygosity rate (F) is more than 0.2, but less than 0.8, the genotype data are inconclusive regarding the sex of an individual and these are marked in column SNPSEX with a 0, and the column STATUS “PROBLEM”. Report the IDs of individuals with discordant sex information to those who conducted sex phenotyping. In situations in which discrepancy cannot be resolved, add the family ID (FID) and individual ID (IID) of the samples to a file named “fail-sexcheck-qc.txt” (one individual per line, tab delimited). grep &quot;PROBLEM&quot; rawdata/rawdata.sexcheck | awk &#39;{ print $1, $2}&#39; &gt; rawdata/fail-sexcheck-qc.txt 4.2 Sample Callrates Let’s get an overview of the missing data per sample and per SNP. plink --bfile rawdata/rawdata --missing --out rawdata/rawdata This produces two files, rawdata/rawdata.imiss and rawdata/rawdata.lmiss. In the .imiss file the N_MISS column denotes the number of missing SNPs, and the F_MISS column denotes the proportion of missing SNPs per individual. raw_IMISS &lt;- data.table::fread(paste0(COURSE_loc, &quot;/rawdata/rawdata.imiss&quot;)) raw_IMISS$callrate &lt;- 1 - raw_IMISS$F_MISS ggpubr::gghistogram(raw_IMISS, x = &quot;callrate&quot;, add = &quot;mean&quot;, add.params = list(color = &quot;#595A5C&quot;, linetype = &quot;dashed&quot;, size = 1), rug = TRUE, bins = 50, color = &quot;#1290D9&quot;, fill = &quot;#1290D9&quot;, xlab = &quot;per sample call rate&quot;) + geom_vline(xintercept = 0.95, linetype = &quot;dashed&quot;, color = &quot;#E55738&quot;, size = 1) ## Warning: geom_vline(): Ignoring `mapping` because `xintercept` was provided. ## Warning: geom_vline(): Ignoring `data` because `xintercept` was provided. The grey dashed line indicates the mean call rate, while the red dashed line indicates the threshold we had determined above. 4.3 Heterozygosity rate To properly calculate heterozygosity rate and relatedness (identity-by-descent [IBD]) we need to do four things: pre-clean the data to get a high-quality set, of independent SNPs, exclude long-range linkage disequilibrium (LD) blocks that bias with these calculations, and exclude A/T and C/G SNPs as these may be ambivalent in interpretation when frequencies between cases and controls are close (MAF ± 0.45), remove all non-autosomal SNPs. We will use the following settings: remove A/T and C/G SNPs with the flag --exclude rawdata/all.atcg.variants.txt, call rate &lt;1% with the flag --geno 0.10, Hardy-Weinberg Equilibrium (HWE) p-value &gt; 1x10-3 with the flag --hwe 1e-3, and MAF&gt;10% with the flag --maf 0.10, prune the data to only select independent SNPs (with low LD r^2) of one pair each with r^2 = 0.2 with the flags --indep-pairwise 100 10 0.2 and --extract rawdata/raw-GWA-data.prune.in, SNPs in long-range LD regions (for example: MHC chr 6 25.8-36Mb, chr 8 inversion 6-16Mb, chr17 40-45Mb, and a few more) with the flag --exclude range rawdata/exclude_problematic_range.txt, remove non-autosomal SNPs with the flag --allow-no-sex --autosome. First, get a list of A/T and C/G SNPs. cat rawdata/rawdata.bim | \\ awk &#39;($5 == &quot;A&quot; &amp;&amp; $6 == &quot;T&quot;) || ($5 == &quot;T&quot; &amp;&amp; $6 == &quot;A&quot;) || ($5 == &quot;C&quot; &amp;&amp; $6 == &quot;G&quot;) || ($5 == &quot;G&quot; &amp;&amp; $6 == &quot;C&quot;)&#39; | awk &#39;{ print $2, $1, $4, $3, $5, $6 }&#39; \\ &gt; rawdata/all.atcg.variants.txt Second, clean the data and get a list of independent SNPs. plink --bfile rawdata/rawdata \\ --allow-no-sex --autosome \\ --maf 0.10 --geno 0.10 --hwe 1e-3 \\ --indep-pairwise 100 10 0.2 \\ --exclude range rawdata/exclude_problematic_range.txt \\ --make-bed --out rawdata/rawdata.clean.temp Please note, we have create a dataset without taking into account LD structure. Thus the flag --indep-pairwise 100 10 0.2 doesn’t actually work. However, with real-data you can use it to prune out unwanted SNPs in high LD. Third, exclude the pruned SNPs. Note, how we include a file to exclude high-LD for the purpose of the practical. plink --bfile rawdata/rawdata.clean.temp \\ --extract rawdata/raw-GWA-data.prune.in \\ --make-bed --out rawdata/rawdata.clean.ultraclean.temp Fourth, remove the A/T and C/G SNPs. plink --bfile rawdata/rawdata.clean.ultraclean.temp \\ --exclude rawdata/all.atcg.variants.txt \\ --make-bed --out rawdata/rawdata.clean.ultraclean Please note, this dataset doesn’t actually include this type of SNP, hence rawdata/all.atcg.variants.txt is empty! Again, you can use this command in real-data to exclude A/T and C/G SNPs. Lastly, remove the temporary files. rm -v rawdata/*.temp* Finally, we can calculate the heterozygosity rate. plink --bfile rawdata/rawdata.clean.ultraclean --het --out rawdata/rawdata.clean.ultraclean This creates the file rawdata/rawdata.clean.ultraclean.het, in which the third column denotes the observed number of homozygous genotypes, O(Hom), and the fifth column denotes the number of nonmissing genotypes, N(NM), per individual. We can now calculate the observed heterozygosity rate per individual using the formula (N(NM) - O(Hom))/N(NM). Often there is a correlation between heterozygosity rate and missing data. Thus, we should plot the observed heterozygosity rate per individual on the x-axis and the proportion of missing SNP, that is the ‘SNP call rate’, per individuals on the y-axis. raw_HET &lt;- data.table::fread(paste0(COURSE_loc, &quot;/rawdata/rawdata.clean.ultraclean.het&quot;)) raw_IMISS$logF_MISS = log10(raw_IMISS$F_MISS) prop_miss = -1.522879 raw_HET$meanHet = (raw_HET$`N(NM)` - raw_HET$`O(HOM)`)/raw_HET$`N(NM)` lower_meanHet = mean(raw_HET$meanHet) - (2*sd(raw_HET$meanHet)) upper_meanHet = mean(raw_HET$meanHet) + (2*sd(raw_HET$meanHet)) raw_IMISSHET = merge(raw_IMISS, raw_HET, by = &quot;IID&quot;) raw_IMISSHET$FID.y &lt;- NULL colnames(raw_IMISSHET)[colnames(raw_IMISSHET)==&quot;FID.x&quot;] &lt;- &quot;FID&quot; colors &lt;- densCols(raw_IMISSHET$logF_MISS, raw_IMISSHET$meanHet) ## Warning in KernSmooth::bkde2D(x, bandwidth = bandwidth, gridsize = nbin, : ## Binning grid too coarse for current (small) bandwidth: consider increasing ## &#39;gridsize&#39; ggpubr::ggscatter(raw_IMISSHET, x = &quot;logF_MISS&quot;, y = &quot;meanHet&quot;, color = colors, xlab = &quot;Proportion of missing genotypes&quot;, ylab = &quot;Heterozygosity rate&quot;) + scale_x_continuous(labels=c(&quot;-3&quot; = &quot;0.001&quot;, &quot;-2&quot; = &quot;0.01&quot;, &quot;-1&quot; = &quot;0.1&quot;, &quot;0&quot; = &quot;1&quot;)) + geom_hline(yintercept = lower_meanHet, linetype = &quot;dashed&quot;, color = &quot;#E55738&quot;, size = 1) + geom_hline(yintercept = upper_meanHet, linetype = &quot;dashed&quot;, color = &quot;#E55738&quot;, size = 1) + geom_vline(xintercept = prop_miss, linetype = &quot;dashed&quot;, color = &quot;#E55738&quot;, size = 1) ## Warning in if (color %in% names(data) &amp; is.null(add.params$color)) ## add.params$color &lt;- color: the condition has length &gt; 1 and only the first ## element will be used Examine the plot to decide reasonable thresholds at which to exclude individuals based on elevated missing or extreme heterozygosity. We chose to exclude all individuals with a genotype failure rate &gt;= 0.03 (vertical dashed line) and/or a heterozygosity rate ± 3 s.d. from the mean (horizontal dashed lines). Add the FID and IID of the samples failing this QC to the file named fail-imisshet-qc.txt. How would you create this file? raw_IMISSHETsub = subset(raw_IMISSHET, logF_MISS &gt; prop_miss | (meanHet &lt; lower_meanHet | meanHet &gt; upper_meanHet), select = c(&quot;FID&quot;, &quot;IID&quot;)) data.table::fwrite(raw_IMISSHETsub, paste0(COURSE_loc,&quot;/rawdata/fail-raw_IMISSHETsub.txt&quot;), sep =&quot; &quot;) 4.4 Relatedness We calculate Identity-by-Descent (IBS), to identify duplicated and related samples (Table 2). IBS is measured by calculating pi-hat, which is in essence the proportion of the DNA that a pair of samples share. To calculate this, we needed this ultraclean dataset, without low-quality SNPs and without high-LD regions. Now we are ready Relation % DNA sharing Monozygotic twins ±100% Parents/child ±50% Sibling ±50% Fraternal twins ±50% Grandparent/grandchild ±25% Aunt/Uncle/Niece/Nephew ±25% Half-sibling ±25% First-cousin ±12.5% Half first-cousin ±6.25% First-cousin once removed ±6.25% Second-cousin ±3.13% Second-cousin once removed ±1.56% Table 2: Familial relations and % DNA shared. plink --bfile rawdata/rawdata.clean.ultraclean --genome --out rawdata/rawdata.clean.ultraclean We can now identify all pairs of individuals with an IBD &gt; 0.185. The code looks at the individual call rates stored in rawdata.imiss and outputs the IDs of the individual with the lowest call rate to ‘fail-IBD-QC.txt’ for subsequent removal. cd rawdata perl ../scripts/run-IBD-QC.pl rawdata rawdata.clean.ultraclean cd .. ibdcallissues &lt;- data.table::fread(paste0(COURSE_loc,&quot;/rawdata/fail-IBD-QC.txt&quot;)) knitr::kable(ibdcallissues, caption = &quot;Failed IBD and callrate&quot;) Table 4.2: Failed IBD and callrate V1 V2 1952 1952 1953 1953 1954 1954 1955 1955 1957 1957 1959 1959 1961 1961 1963 1963 1965 1965 1967 1967 1969 1969 1971 1971 1973 1973 1975 1975 4.5 Ancestral background 4.5.1 HapMap 3 We will project our data to a reference, in this example HapMap Phase II (HapMap3), which includes individuals from four distinct global populations, but it could also be 1000G phase 1. Or any other reference depending on the dataset. To this end we will merge our data with HapMap3. The alleles at each marker must be aligned to the same DNA strand to allow our data to merge correctly. Because not all SNPs are required for this analysis, A-&gt;T and C-&gt;G SNPs, which are more difficult to align, can be omitted. Let’s start by creating a new BED file, excluding from the GWA data those SNPs that do not feature in the genotype data of the four original HapMap3 populations. plink --bfile rawdata/rawdata --extract reference/hapmap3r2_CEU.CHB.JPT.YRI.no-at-cg-snps.txt --make-bed --out rawdata/rawdata.hm3 Now, let’s try to merge rawdata/rawdata.hm3 with the HapMap data and extract the pruned SNP set from above. plink --bfile rawdata/rawdata.hm3 --bmerge reference/hapmap3r2_CEU.CHB.JPT.YRI.founders.no-at-cg-snps --extract rawdata/raw-GWA-data.prune.in --make-bed --out rawdata/rawdata.hapmap3r2.pruned You probably get an error like below: Error: 59 variants with 3+ alleles present. * If you believe this is due to strand inconsistency, try --flip with rawdata/rawdata.hapmap3r2.pruned-merge.missnp. (Warning: if this seems to work, strand errors involving SNPs with A/T or C/G alleles probably remain in your data. If LD between nearby SNPs is high, --flip-scan should detect them.) * If you are dealing with genuine multiallelic variants, we recommend exporting that subset of the data to VCF (via e.g. &#39;--recode vcf&#39;), merging with another tool/script, and then importing the result; PLINK is not yet suited to handling them. Because all A-&gt;T and C-&gt;G SNPs have been removed before undertaking this analysis, all other SNPs that are discordant for DNA strands between the two data sets are listed in the rawdata.hapmap3r2.pruned-merge.missnp file. To align the strands across the data sets and successfully complete the merge, we can do the following: plink --bfile rawdata/rawdata --extract reference/hapmap3r2_CEU.CHB.JPT.YRI.no-at-cg-snps.txt --flip rawdata/rawdata.hapmap3r2.pruned-merge.missnp --make-bed --out rawdata/rawdata.hm3 And repeat this: plink --bfile rawdata/rawdata.hm3 --bmerge reference/hapmap3r2_CEU.CHB.JPT.YRI.founders.no-at-cg-snps --extract rawdata/raw-GWA-data.prune.in --make-bed --out rawdata/rawdata.hapmap3r2.pruned Let’s not be lazy and clean this dataset too. plink --bfile rawdata/rawdata.hapmap3r2.pruned \\ --allow-no-sex --autosome \\ --maf 0.10 --geno 0.10 --hwe 1e-3 \\ --indep-pairwise 100 10 0.2 \\ --exclude range rawdata/exclude_problematic_range.txt \\ --make-bed --out rawdata/rawdata.hapmap3r2.pruned.clean 4.5.2 Principal Component Analysis Using a Principal Component Analysis (PCA) we can reduce the dimensions of the data, and project the “ancestral distances”. In other words, the principal component 1 (the first dimension) and principal component 2 (the second dimension) which will capture most of the variation in the data and represent how much each sample is alike the next. First, we make a copy of the BIM and FAM-files. cp -v rawdata/rawdata.hapmap3r2.pruned.bim rawdata/rawdata.hapmap3r2.pruned.pedsnp cp -v rawdata/rawdata.hapmap3r2.pruned.fam rawdata/rawdata.hapmap3r2.pruned.pedind 4.5.2.1 Installing EIGENSOFT Now, we are ready to perform the PCA using smartPCA. For this EIGENSOFT needs to be installed. Unfortunately, this doesn’t work on this VirtualMachine you are working on - you need gsl, openblas and llvm to make it work. Installing EIGENSOFT I am still sharing the code you’ll need - you could try this on your personal MacBook for instance. mkdir -v $HOME/git cd $HOME/git git clone https://github.com/DReichLab/EIG.git cd EIG/src make make install Executing smartPCA Should you run this on your personal laptop, be aware it will take a few minutes to do so - perfect moment for a cup of coffee or to stretch your legs. perl ~/git/EIG/bin/smartpca.perl \\ -i rawdata/rawdata.hapmap3r2.pruned.bed \\ -a rawdata/rawdata.hapmap3r2.pruned.pedsnp \\ -b rawdata/rawdata.hapmap3r2.pruned.pedind \\ -k 10 \\ -o rawdata/rawdata.hapmap3r2.pruned.pca \\ -p rawdata/rawdata.hapmap3r2.pruned.plot \\ -e rawdata/rawdata.hapmap3r2.pruned.eval \\ -l rawdata/rawdata.hapmap3r2.pruned.log \\ -m 5 \\ -t 10 \\ -s 6.0 \\ -w reference/hapmap3r2_CEU.CHB.JPT.YRI-pca-populations.txt See below an explanation of the above commands: ../bin/smartpca.perl -i example.geno : genotype file in any format (see ../CONVERTF/README) -a example.snp : snp file in any format (see ../CONVERTF/README) -b example.ind : indiv file in any format (see ../CONVERTF/README) -k k : (Default is 10) number of principal components to output -o example.pca : output file of principal components. Individuals removed as outliers will have all values set to 0.0 in this file. -p example.plot : prefix of output plot files of top 2 principal components. (labeling individuals according to labels in indiv file) -e example.eval : output file of all eigenvalues -l example.log : output logfile -m maxiter : (Default is 5) maximum number of outlier removal iterations. To turn off outlier removal, set -m 0. -t topk : (Default is 10) number of principal components along which to remove outliers during each outlier removal iteration. -s sigma : (Default is 6.0) number of standard deviations which an individual must exceed, along one of topk top principal components, in order to be removed as an outlier. OPTIONAL FLAGS: -w poplist : compute eigenvectors using populations in poplist only, where poplist is an ASCII file with one population per line -y plotlist : output plot will include populations in plotlist only, where plotlist is an ASCII file with one population per line -z badsnpname : list of SNPs which should be excluded from the analysis -q YES/NO : If set to YES, assume that there is a single population and the population field contains real-valued phenotypes. (Corresponds to qtmode parameter in smartpca program.) The default value for this parameter is NO. NOTE: I made sure that in your download the results from this analysis are available for usage. That is: rawdata/rawdata.hapmap3r2.pruned.evec rawdata/rawdata.hapmap3r2.pruned.par 4.5.2.2 PCA plotting Now that we have calculated PCs, we can start plotting them. Let’s create a scatter diagram of the first two principal components, including all individuals in the file rawdata.hapmap3r2.pruned.pca.evec (the first and second principal components are columns 2 and 3, respectively). Use the data in column 4 to color the points according to sample origin. An R script for creating this plot (scripts/plot-pca-results.Rscript) is provided (although any standard graphing software can be used). PCA &lt;- data.table::fread(paste0(COURSE_loc,&quot;/rawdata/rawdata.hapmap3r2.pruned.pca.evec&quot;), header = FALSE, skip = 1) # Case/Control -&gt; black, pch = &quot;+&quot; # CEU = 3 -&gt; red, pch = 20 # CHB = 4 -&gt; pink, pch = 20 # JPT = 5 -&gt; purple, pch = 20 # YRI = 6 -&gt; green, pch = 20 PCA$V12[PCA$V12 == &quot;Case&quot;] &lt;- &quot;Case&quot; #595A5C PCA$V12[PCA$V12 == &quot;Control&quot;] &lt;- &quot;Control&quot; #595A5C PCA$V12[PCA$V12 == &quot;3&quot;] &lt;- &quot;CEU&quot; #E55738 PCA$V12[PCA$V12 == &quot;4&quot;] &lt;- &quot;CHB&quot; #D5267B PCA$V12[PCA$V12 == &quot;5&quot;] &lt;- &quot;JPT&quot; #9A3480 PCA$V12[PCA$V12 == &quot;6&quot;] &lt;- &quot;YRI&quot; #49A01D PCAplot &lt;- ggpubr::ggscatter(PCA, x = &quot;V2&quot;, y = &quot;V3&quot;, color = &quot;V12&quot;, palette = c(&quot;#595A5C&quot;, &quot;#595A5C&quot;, &quot;#E55738&quot;, &quot;#D5267B&quot;, &quot;#9A3480&quot;, &quot;#49A01D&quot;), shape = &quot;V12&quot;, xlab = &quot;principal component 1&quot;, ylab = &quot;principal component 2&quot;) + geom_hline(yintercept = 0.075, linetype = &quot;dashed&quot;, color = &quot;#A2A3A4&quot;, size = 1) ggpubr::ggpar(PCAplot, title = &quot;Principal Component Analysis&quot;, subtitle = &quot;Reference population: HapMap 3&quot;, legend.title = &quot;Populations&quot;, legend = &quot;right&quot;) Derive PC1 and PC2 thresholds so that only individuals who match the given ancestral population are included. For populations of European descent, this will be either the CEU or TSI HapMap3 individuals. Here, we chose to exclude all individuals with a second principal component score less than 0.072. Write the FID and IID of these individuals to a file called fail-ancestry-QC.txt. cat rawdata/rawdata.hapmap3r2.pruned.pca.evec | tail -n +2 | \\ awk &#39;$3 &lt; 0.075&#39; | awk &#39;{ print $1 }&#39; | awk -F&quot;:&quot; &#39;{ print $1, $2 }&#39; &gt; rawdata/fail-ancestry-QC.txt Choosing which thresholds to apply (and thus which individuals to remove) is not a straightforward process. The key is to remove those individuals with greatly divergent ancestry, as these samples introduce the most bias to the study. Identification of more fine-scale ancestry can be conducted by using less divergent reference samples (e.g., within Europe, stratification could be identified using the CEU, TSI (Italian), GBR (British), FIN (Finnish) and IBS (Iberian) samples from the 1,000 Genomes Project (http://www.1000genomes.org/)). Robust identification of fine-scale population structure often requires the construction of many (2–10) principal components. 4.5.3 1000G phase 1 You could do the above again but now with projecting the 1000G phase 1 populations. The all the 1000G phase 1 data is provided as tutorial data (), as well as a subset including only the variants in our rawdata. You can try and run the PCA with 1000G and project the results – let’s do that in our spare time and continue for now with the QC based on HM3. But please, do show us the results tomorrow … :-) For your convenience there are some codes below which you may need. Get a list of relevant variants. cat rawdata/rawdata.bim | grep &quot;rs&quot; &gt; rawdata/all.variants.txt Extract those from the 1000G phase 1 data. plink --bfile reference/1kg_phase1_all/1kg_phase1_all --extract rawdata/all.variants.txt --make-bed --out reference/1kg_phase1_all/1kg_phase1_raw Get a list of A/T and C/G variants from 1000G to exclude. cat reference/1kg_phase1_all/1kg_phase1_raw.bim | \\ awk &#39;($5 == &quot;A&quot; &amp;&amp; $6 == &quot;T&quot;) || ($5 == &quot;T&quot; &amp;&amp; $6 == &quot;A&quot;) || ($5 == &quot;C&quot; &amp;&amp; $6 == &quot;G&quot;) || ($5 == &quot;G&quot; &amp;&amp; $6 == &quot;C&quot;)&#39; | awk &#39;{ print $2, $1, $4, $3, $5, $6 }&#39; \\ &gt; reference/1kg_phase1_all/all.1kg.atcg.variants.txt Exclude those A/T and C/G variants in both datasets. plink --bfile reference/1kg_phase1_all/1kg_phase1_raw --exclude reference/1kg_phase1_all/all.1kg.atcg.variants.txt --make-bed --out reference/1kg_phase1_all/1kg_phase1_raw_no_atcg plink --bfile rawdata/rawdata --exclude reference/1kg_phase1_all/all.1kg.atcg.variants.txt --make-bed --out rawdata/rawdata_1kg_phase1_raw_no_atcg Try and merge the data while extracting the pruned SNP-set. plink --bfile rawdata/rawdata_1kg_phase1_raw_no_atcg --bmerge reference/1kg_phase1_all/1kg_phase1_raw_no_atcg --extract rawdata/raw-GWA-data.prune.in --make-bed --out rawdata/rawdata.1kg_phase1.pruned There probably is an error … Error: 72 variants with 3+ alleles present. * If you believe this is due to strand inconsistency, try --flip with rawdata/rawdata.1kg_phase1.pruned-merge.missnp. (Warning: if this seems to work, strand errors involving SNPs with A/T or C/G alleles probably remain in your data. If LD between nearby SNPs is high, --flip-scan should detect them.) * If you are dealing with genuine multiallelic variants, we recommend exporting that subset of the data to VCF (via e.g. &#39;--recode vcf&#39;), merging with another tool/script, and then importing the result; PLINK is not yet suited to handling them. See https://www.cog-genomics.org/plink/1.9/data#merge3 for more discussion. So let’s flip some variants. plink --bfile rawdata/rawdata --exclude reference/1kg_phase1_all/all.1kg.atcg.variants.txt --flip rawdata/rawdata.1kg_phase1.pruned-merge.missnp --make-bed --out rawdata/rawdata_1kg_phase1_raw_no_atcg Let’s try and merge the data while extracting the pruned SNP-set. plink --bfile rawdata/rawdata_1kg_phase1_raw_no_atcg --bmerge reference/1kg_phase1_all/1kg_phase1_raw_no_atcg --extract rawdata/raw-GWA-data.prune.in --make-bed --out rawdata/rawdata.1kg_phase1.pruned There still is an error – there are multi-allelic variants present which PLINK can’t handle. Error: 14 variants with 3+ alleles present. * If you believe this is due to strand inconsistency, try --flip with rawdata/rawdata.1kg_phase1.pruned-merge.missnp. (Warning: if this seems to work, strand errors involving SNPs with A/T or C/G alleles probably remain in your data. If LD between nearby SNPs is high, --flip-scan should detect them.) * If you are dealing with genuine multiallelic variants, we recommend exporting that subset of the data to VCF (via e.g. &#39;--recode vcf&#39;), merging with another tool/script, and then importing the result; PLINK is not yet suited to handling them. See https://www.cog-genomics.org/plink/1.9/data#merge3 for more discussion. Let’s just remove these multi-allelic variants. plink --bfile rawdata/rawdata_1kg_phase1_raw_no_atcg --exclude rawdata/rawdata.1kg_phase1.pruned-merge.missnp --make-bed --out rawdata/rawdata_1kg_phase1_raw_no_atcg_bi Now we should be able to merge the data… plink --bfile rawdata/rawdata_1kg_phase1_raw_no_atcg_bi --bmerge reference/1kg_phase1_all/1kg_phase1_raw_no_atcg --extract rawdata/raw-GWA-data.prune.in --make-bed --out rawdata/rawdata.1kg_phase1.pruned That worked! Let’s run a PCA. cp -v rawdata/rawdata.1kg_phase1.pruned.bim rawdata/rawdata.1kg_phase1.pruned.pedsnp cp -v rawdata/rawdata.1kg_phase1.pruned.fam rawdata/rawdata.1kg_phase1.pruned.pedind perl ~/git/EIG/bin/smartpca.perl \\ -i rawdata/rawdata.1kg_phase1.pruned.bed \\ -a rawdata/rawdata.1kg_phase1.pruned.pedsnp \\ -b rawdata/rawdata.1kg_phase1.pruned.pedind \\ -k 10 \\ -o rawdata/rawdata.1kg_phase1.pruned.pca \\ -p rawdata/rawdata.1kg_phase1.pruned.plot \\ -e rawdata/rawdata.1kg_phase1.pruned.eval \\ -l rawdata/rawdata.1kg_phase1.pruned.log \\ -m 5 \\ -t 10 \\ -s 6.0 \\ -w reference/1kg_phase1_all/1kg-pca-populations.txt And we can try to plot this result as well. PCA_1kG &lt;- data.table::fread(paste0(COURSE_loc,&quot;/rawdata/rawdata.1kg_phase1.pruned.pca.evec&quot;), header = FALSE, skip = 1) # Population Description Super population Code Counts # ASW African Ancestry in Southwest US AFR 4 #49A01D # CEU Utah residents with Northern and Western European ancestry EUR 7 #E55738 # CHB Han Chinese in Bejing, China EAS 8 #9A3480 # CHS Southern Han Chinese, China EAS 9 #705296 # CLM Colombian in Medellin, Colombia MR 10 #8D5B9A # FIN Finnish in Finland EUR 12 #2F8BC9 # GBR British in England and Scotland EUR 13 #1290D9 # IBS Iberian populations in Spain EUR 16 #1396D8 # JPT Japanese in Tokyo, Japan EAS 18 #D5267B # LWK Luhya in Webuye, Kenya AFR 20 #78B113 # MXL Mexican Ancestry in Los Angeles, California AMR 22 #F59D10 # PUR Puerto Rican in Puerto Rico AMR 25 #FBB820 # TSI Toscani in Italy EUR 27 #4C81BF # YRI Yoruba in Ibadan, Nigeria AFR 28 #C5D220 PCA_1kG$V12[PCA_1kG$V12 == &quot;Case&quot;] &lt;- &quot;Case&quot; PCA_1kG$V12[PCA_1kG$V12 == &quot;Control&quot;] &lt;- &quot;Control&quot; PCA_1kG$V12[PCA_1kG$V12 == &quot;4&quot;] &lt;- &quot;ASW&quot; PCA_1kG$V12[PCA_1kG$V12 == &quot;7&quot;] &lt;- &quot;CEU&quot; PCA_1kG$V12[PCA_1kG$V12 == &quot;8&quot;] &lt;- &quot;CHB&quot; PCA_1kG$V12[PCA_1kG$V12 == &quot;9&quot;] &lt;- &quot;CHS&quot; PCA_1kG$V12[PCA_1kG$V12 == &quot;10&quot;] &lt;- &quot;CLM&quot; PCA_1kG$V12[PCA_1kG$V12 == &quot;12&quot;] &lt;- &quot;FIN&quot; PCA_1kG$V12[PCA_1kG$V12 == &quot;13&quot;] &lt;- &quot;GBR&quot; PCA_1kG$V12[PCA_1kG$V12 == &quot;16&quot;] &lt;- &quot;IBS&quot; PCA_1kG$V12[PCA_1kG$V12 == &quot;18&quot;] &lt;- &quot;JPT&quot; PCA_1kG$V12[PCA_1kG$V12 == &quot;20&quot;] &lt;- &quot;LWK&quot; PCA_1kG$V12[PCA_1kG$V12 == &quot;22&quot;] &lt;- &quot;MXL&quot; PCA_1kG$V12[PCA_1kG$V12 == &quot;25&quot;] &lt;- &quot;PUR&quot; PCA_1kG$V12[PCA_1kG$V12 == &quot;27&quot;] &lt;- &quot;TSI&quot; PCA_1kG$V12[PCA_1kG$V12 == &quot;28&quot;] &lt;- &quot;YRI&quot; PCA_1kGplot &lt;- ggpubr::ggscatter(PCA_1kG, x = &quot;V2&quot;, y = &quot;V3&quot;, color = &quot;V12&quot;, palette = c(&quot;#595A5C&quot;, &quot;#49A01D&quot;, &quot;#E55738&quot;, &quot;#9A3480&quot;, &quot;#705296&quot;, &quot;#595A5C&quot;, &quot;#8D5B9A&quot;, &quot;#2F8BC9&quot;, &quot;#1290D9&quot;, &quot;#1396D8&quot;, &quot;#D5267B&quot;, &quot;#78B113&quot;, &quot;#F59D10&quot;, &quot;#FBB820&quot;, &quot;#4C81BF&quot;, &quot;#C5D220&quot;), xlab = &quot;principal component 1&quot;, ylab = &quot;principal component 2&quot;) + geom_hline(yintercept = 0.023, linetype = &quot;dashed&quot;, color = &quot;#595A5C&quot;, size = 1) ggpubr::ggpar(PCA_1kGplot, title = &quot;Principal Component Analysis&quot;, subtitle = &quot;Reference population: 1000 G, phase 1&quot;, legend.title = &quot;Populations&quot;, legend = &quot;right&quot;) In a similar fashion as in the above with the HapMap3 reference, you could remove the samples below the threshold based on this PCA. 4.6 Removing samples Finally! We have a list of samples of poor quality or divergent ancestry, and duplicated or related samples. We should remove these. Let’s collect all IDs from our fail-*-files into a single file. cat rawdata/fail-* | sort -k1 | uniq &gt; rawdata/fail-qc-inds.txt This new file should now contain a list of unique individuals failing the previous QC steps which we want to remove. plink --bfile rawdata/rawdata --remove rawdata/fail-qc-inds.txt --make-bed --out rawdata/clean_inds_data 4.7 The next step Now that you filtered samples, we should turn our attention to step 2 of the QC for GWAS: identify SNPs of poor quality in (Chapter @ref(gwas_basics_snp_qc)). "],["per-snp-qc.html", "Chapter 5 Per-SNP QC 5.1 SNP call rates 5.2 Differential SNP call rates 5.3 Allele frequencies 5.4 Hardy-Weinberg Equilibrium 5.5 Final SNP QC 5.6 A Milestone", " Chapter 5 Per-SNP QC Now that we removed samples, we can focus on low-quality variants. 5.1 SNP call rates We start by calculating the missing genotype rate for each SNP, in other words the per-SNP call rate. plink --bfile rawdata/clean_inds_data --missing --out rawdata/clean_inds_data Let’s visualize the results to identify a threshold for extreme genotype failure rate. We chose a callrate threshold of 3%, but it’s arbitrary and depending on the dataset and the number of samples. clean_LMISS &lt;- data.table::fread(paste0(COURSE_loc, &quot;/rawdata/clean_inds_data.lmiss&quot;)) clean_LMISS$callrate &lt;- 1 - clean_LMISS$F_MISS ggpubr::gghistogram(clean_LMISS, x = &quot;callrate&quot;, add = &quot;mean&quot;, add.params = list(color = &quot;#595A5C&quot;, linetype = &quot;dashed&quot;, size = 1), rug = TRUE, bins = 50, color = &quot;#1290D9&quot;, fill = &quot;#1290D9&quot;, xlab = &quot;per SNP call rate&quot;) + geom_vline(xintercept = 0.95, linetype = &quot;dashed&quot;, color = &quot;#E55738&quot;, size = 1) ## Warning: geom_vline(): Ignoring `mapping` because `xintercept` was provided. ## Warning: geom_vline(): Ignoring `data` because `xintercept` was provided. 5.2 Differential SNP call rates There could also be differences in genotype call rates between cases and controls. It is very important to check for this because these differences could lead to spurious associations. We can test all markers for differences in call rate between cases and controls, or based on plink --bfile rawdata/clean_inds_data --test-missing --out rawdata/clean_inds_data Let’s collect all the SNPs ith a significantly different (P &lt; 0.00001) missing data rate between cases and controls. cat rawdata/clean_inds_data.missing | awk &#39;$5 &lt; 0.00001&#39; | awk &#39;{ print $2 }&#39; &gt; rawdata/fail-diffmiss-qc.txt 5.3 Allele frequencies We should also get an idea on what the allele frequencies are in our dataset. Low frequent SNPs should probably be excluded, as these are uninformative when monomorphic (allele frequency = 0), or they may lead to spurious associations. plink --bfile rawdata/clean_inds_data --freq --out rawdata/clean_inds_data Let’s also plot these data. You can view the result below, and type over the code to do it yourself. clean_FREQ &lt;- data.table::fread(paste0(COURSE_loc, &quot;/rawdata/clean_inds_data.frq&quot;)) ggpubr::gghistogram(clean_FREQ, x = &quot;MAF&quot;, add = &quot;mean&quot;, add.params = list(color = &quot;#595A5C&quot;, linetype = &quot;dashed&quot;, size = 1), rug = TRUE, color = &quot;#1290D9&quot;, fill = &quot;#1290D9&quot;, xlab = &quot;minor allele frequency&quot;) + geom_vline(xintercept = 0.05, linetype = &quot;dashed&quot;, color = &quot;#E55738&quot;, size = 1) ## Warning: Using `bins = 30` by default. Pick better value with the argument ## `bins`. ## Warning: geom_vline(): Ignoring `mapping` because `xintercept` was provided. ## Warning: geom_vline(): Ignoring `data` because `xintercept` was provided. ## Warning: Removed 3286 rows containing non-finite values (stat_bin). ### A note on allele coding Oh, one more thing about alleles. PLINK codes alleles as follows: A1 = minor allele, the least frequent allele A2 = major allele, the most frequent allele And when you use PLINK the flag --freq or --maf is always relative to the A1-allele, as is the odds ratio (OR) or effect size (beta). However, SNPTEST makes use of the so-called OXFORD-format, this codes alleles as follows: A = the ‘other’ allele B = the ‘coded’ allele When you use SNPTEST it will report the allele frequency as CAF, in other words the coded allele frequency, and the effect size (beta) is always relative to the B-allele. This means, CAF could be the MAF, or minor allele frequency, but this is not a given. In other words, always make sure what the allele-coding of a given program, be it PLINK, SNPTEST, GCTA, et cetera, is! I cannot stress this enough. Ask yourself: ‘what is the allele frequency refering to?’, ‘the effect size is relative to…?’. Right, let’s continue. 5.4 Hardy-Weinberg Equilibrium Because we are performing a case-control genome-wide association study, we probably expect some differences in Hardy-Weinberg Equilibrium (HWE), but extreme deviations are probably indicative of genotyping errors. plink --bfile rawdata/clean_inds_data --hardy --out rawdata/clean_inds_data Let’s also plot these data. You can view the result below, and type over the code to do it yourself. clean_HWE &lt;- data.table::fread(paste0(COURSE_loc, &quot;/rawdata/clean_inds_data.hwe&quot;)) clean_HWE$logP &lt;- -log10(clean_HWE$P) ggpubr::gghistogram(clean_HWE, x = &quot;logP&quot;, add = &quot;mean&quot;, add.params = list(color = &quot;#595A5C&quot;, linetype = &quot;dashed&quot;, size = 1), rug = TRUE, # color = &quot;#1290D9&quot;, fill = &quot;#1290D9&quot;, color = &quot;TEST&quot;, fill = &quot;TEST&quot;, palette = &quot;lancet&quot;, facet.by = &quot;TEST&quot;, bins = 50, xlab = &quot;HWE -log10(P)&quot;) + geom_vline(xintercept = 5, linetype = &quot;dashed&quot;, color = &quot;#E55738&quot;, size = 1) 5.5 Final SNP QC We are ready to perform the final QC. After inspectig the graphs we will filter on a MAF &lt; 0.01, call rate &lt; 0.05, and HWE &lt; 0.00001, in addition those SNPs that failed the differential call rate test will be removed. plink --bfile rawdata/clean_inds_data --exclude rawdata/fail-diffmiss-qc.txt --maf 0.01 --geno 0.05 --hwe 0.00001 --make-bed --out rawdata/cleandata 5.6 A Milestone Congratulations. You reached a very important milestone. Now that you filtered samples and SNPs, we can finally start the association analyses in (Chapter @ref(gwas_basics_association_testing)). "],["genome-wide-association-study.html", "Chapter 6 Genome-wide association study 6.1 Exploring the data 6.2 Genetic models 6.3 Logistic regression 6.4 Let’s get visual", " Chapter 6 Genome-wide association study Now that you have learned how to perform QC, you can easily run a GWAS and execute some downstream visualisation and analyses. Let’s do this with a dummy dataset. 6.1 Exploring the data Even though someone says that the QC was done, it is still wise and good practice to run some of the commands above to get a ‘feeling’ about the data. So let’s do this. plink --bfile gwas/gwa --freq --out gwas/gwa plink --bfile gwas/gwa --missing --out gwas/gwa plink --bfile gwas/gwa --hardy --out gwas/gwa Let’s visualise the results. gwas_HWE &lt;- data.table::fread(paste0(COURSE_loc, &quot;/gwas/gwa.hwe&quot;)) gwas_FRQ &lt;- data.table::fread(paste0(COURSE_loc, &quot;/gwas/gwa.frq&quot;)) gwas_IMISS &lt;- data.table::fread(paste0(COURSE_loc, &quot;/gwas/gwa.imiss&quot;)) gwas_LMISS &lt;- data.table::fread(paste0(COURSE_loc, &quot;/gwas/gwa.lmiss&quot;)) gwas_HWE$logP &lt;- -log10(gwas_HWE$P) ggpubr::gghistogram(gwas_HWE, x = &quot;logP&quot;, add = &quot;mean&quot;, add.params = list(color = &quot;#595A5C&quot;, linetype = &quot;dashed&quot;, size = 1), rug = TRUE, # color = &quot;#1290D9&quot;, fill = &quot;#1290D9&quot;, color = &quot;TEST&quot;, fill = &quot;TEST&quot;, palette = &quot;lancet&quot;, facet.by = &quot;TEST&quot;, bins = 50, xlab = &quot;HWE -log10(P)&quot;) + geom_vline(xintercept = 5, linetype = &quot;dashed&quot;, color = &quot;#E55738&quot;, size = 1) ggpubr::gghistogram(gwas_FRQ, x = &quot;MAF&quot;, add = &quot;mean&quot;, add.params = list(color = &quot;#595A5C&quot;, linetype = &quot;dashed&quot;, size = 1), rug = TRUE, color = &quot;#1290D9&quot;, fill = &quot;#1290D9&quot;, xlab = &quot;minor allele frequency&quot;) + geom_vline(xintercept = 0.05, linetype = &quot;dashed&quot;, color = &quot;#E55738&quot;, size = 1) ## Warning: Using `bins = 30` by default. Pick better value with the argument ## `bins`. ## Warning: geom_vline(): Ignoring `mapping` because `xintercept` was provided. ## Warning: geom_vline(): Ignoring `data` because `xintercept` was provided. gwas_IMISS$callrate &lt;- 1 - gwas_IMISS$F_MISS ggpubr::gghistogram(gwas_IMISS, x = &quot;callrate&quot;, add = &quot;mean&quot;, add.params = list(color = &quot;#595A5C&quot;, linetype = &quot;dashed&quot;, size = 1), rug = TRUE, bins = 50, color = &quot;#1290D9&quot;, fill = &quot;#1290D9&quot;, xlab = &quot;per sample call rate&quot;) + geom_vline(xintercept = 0.95, linetype = &quot;dashed&quot;, color = &quot;#E55738&quot;, size = 1) ## Warning: geom_vline(): Ignoring `mapping` because `xintercept` was provided. ## geom_vline(): Ignoring `data` because `xintercept` was provided. gwas_LMISS$callrate &lt;- 1 - gwas_LMISS$F_MISS ggpubr::gghistogram(gwas_LMISS, x = &quot;callrate&quot;, add = &quot;mean&quot;, add.params = list(color = &quot;#595A5C&quot;, linetype = &quot;dashed&quot;, size = 1), rug = TRUE, bins = 50, color = &quot;#1290D9&quot;, fill = &quot;#1290D9&quot;, xlab = &quot;per SNP call rate&quot;) + geom_vline(xintercept = 0.95, linetype = &quot;dashed&quot;, color = &quot;#E55738&quot;, size = 1) ## Warning: geom_vline(): Ignoring `mapping` because `xintercept` was provided. ## geom_vline(): Ignoring `data` because `xintercept` was provided. 6.2 Genetic models A simple chi-square test of association can be done. plink --bfile gwas/gwa --model --out gwas/data Genotypic, dominant and recessive tests will not be conducted if any one of the cells in the table of case-control by genotype counts contains less than five observations. This is because the chi-square approximation may not be reliable when cell counts are small. For SNPs with MAFs &lt; 5%, a sample of more than 2,000 cases and controls would be required to meet this threshold and more than 50,000 would be required for SNPs with MAF &lt; 1%. You can change this default behaviour by adding the flag --cell, e.g., we could lower the threshold to 3. plink --bfile gwas/gwa --model --cell 3 --out gwas/data Let’s review the contents of the results. gwas_model &lt;- data.table::fread(paste0(COURSE_loc, &quot;/gwas/data.model&quot;)) dim(gwas_model) ## [1] 1530510 10 N_SNPS = length(gwas_model$SNP) gwas_model[1:10, 1:10] ## CHR SNP A1 A2 TEST AFF UNAFF CHISQ DF P ## 1: 1 rs3934834 T C GENO 23/348/1582 23/321/1521 0.26070 2 0.8778 ## 2: 1 rs3934834 T C TREND 394/3512 367/3363 0.12770 1 0.7209 ## 3: 1 rs3934834 T C ALLELIC 394/3512 367/3363 0.13070 1 0.7177 ## 4: 1 rs3934834 T C DOM 371/1582 344/1521 0.19060 1 0.6625 ## 5: 1 rs3934834 T C REC 23/1930 23/1842 0.02475 1 0.8750 ## 6: 1 rs3737728 A G GENO 206/950/842 222/891/871 2.93100 2 0.2310 ## 7: 1 rs3737728 A G TREND 1362/2634 1335/2633 0.17780 1 0.6733 ## 8: 1 rs3737728 A G ALLELIC 1362/2634 1335/2633 0.17200 1 0.6783 ## 9: 1 rs3737728 A G DOM 1156/842 1113/871 1.25700 1 0.2623 ## 10: 1 rs3737728 A G REC 206/1792 222/1762 0.80220 1 0.3704 It contains 1530510 rows, one for each SNP, and each type of test (genotypic, trend, allelic, dominant, and recessive) and the following columns: chromosome [CHR], the SNP identifier [SNP], the minor allele [A1] (PLINK always codes the A1-allele as the minor allele!), the major allele [A2], the test performed [TEST]: GENO (genotypic association); TREND (Cochran-Armitage trend); ALLELIC (allelic as- sociation); DOM (dominant model); and REC (recessive model)], the cell frequency counts for cases [AFF], and the cell frequency counts for controls [UNAFF], the chi-square test statistic [CHISQ], the degrees of freedom for the test [DF], and the asymptotic P value [P] of association. 6.3 Logistic regression We can also perform a test of association using logistic regression. In this case we might want to correct for covariates/confounding factors, for example age, sex, ancestral background, i.e. principal components, and other study specific covariates (e.g. hospital of inclusion, genotyping centre etc.). In that case each of these P values is adjusted for the effect of the covariates. When running a regression analysis, be it linear or logistic, PLINK assumes a multiplicative model. By default, when at least one male and one female is present, sex (male = 1, female = 0) is automatically added as a covariate on X chromosome SNPs, and nowhere else. The sex flag causes it to be added everywhere, while no-x-sex excludes it. plink --bfile gwas/gwa --logistic sex --covar gwas/gwa.covar --out gwas/data Let’s examine the results gwas_assoc &lt;- data.table::fread(paste0(COURSE_loc, &quot;/gwas/data.assoc.logistic&quot;)) dim(gwas_assoc) ## [1] 918306 9 gwas_assoc[1:9, 1:9] ## CHR SNP BP A1 TEST NMISS OR STAT P ## 1: 1 rs3934834 995669 T ADD 3818 1.0290 0.38120 0.7031 ## 2: 1 rs3934834 995669 T AGE 3818 1.0020 1.11800 0.2635 ## 3: 1 rs3934834 995669 T SEX 3818 1.0120 0.19090 0.8486 ## 4: 1 rs3737728 1011278 A ADD 3982 1.0190 0.38670 0.6990 ## 5: 1 rs3737728 1011278 A AGE 3982 1.0020 1.09800 0.2721 ## 6: 1 rs3737728 1011278 A SEX 3982 1.0060 0.09898 0.9212 ## 7: 1 rs6687776 1020428 T ADD 3915 0.9692 -0.33330 0.7389 ## 8: 1 rs6687776 1020428 T AGE 3915 1.0020 1.04000 0.2984 ## 9: 1 rs6687776 1020428 T SEX 3915 1.0150 0.23690 0.8127 If no model option is specified, the first row for each SNP corresponds to results for a multiplicative test of association. The C &gt;= 0 subsequent rows for each SNP correspond to separate tests of significance for each of the C covariates included in the regression model. We can remove the covariate-specific lines from the main report by adding the hide-covar flag. The columns in the association results are: - the chromosome [CHR], - the SNP identifier [SNP], - the base-pair location [BP], - the minor allele [A1], - the test performed [TEST]: ADD (multiplicative model or genotypic model testing additivity), - GENO_2DF (genotypic model), - DOMDEV (genotypic model testing deviation from additivity), - DOM (dominant model), or - REC (recessive model)], - the number of missing individuals included [NMISS], - the OR relative to the A1, i.e. minor allele, - the coefficient z-statistic [STAT], and - the asymptotic P-value [P] of association. We need to calculate the standard error and confidence interval from the z-statistic. We can modify the effect size (OR) to output the beta by adding the beta flag. 6.4 Let’s get visual Looking at numbers is important, but it won’t give you a perfect overview. We should turn to visualizing our results in (Chapter @ref(gwas_basics_results_visualization)). "],["gwas-visualisation.html", "Chapter 7 GWAS visualisation 7.1 Manhattan plots 7.2 Other plots 7.3 Interactive plots 7.4 Regional association plots 7.5 Stop playing around", " Chapter 7 GWAS visualisation Data visualization is key, not only for presentation but also to inspect the results. 7.0.1 QQ plots We should create quantile-quantile (QQ) plots to compare the observed association test statistics with their expected values under the null hypothesis of no association and so assess the number, magnitude and quality of true associations. First, we will add the standard error, call rate, A2, and allele frequencies. gwas_assoc_sub &lt;- subset(gwas_assoc, TEST == &quot;ADD&quot;) gwas_assoc_sub$TEST &lt;- NULL temp &lt;- subset(gwas_FRQ, select = c(&quot;SNP&quot;, &quot;A2&quot;, &quot;MAF&quot;, &quot;NCHROBS&quot;)) gwas_assoc_subfrq &lt;- merge(gwas_assoc_sub, temp, by = &quot;SNP&quot;) temp &lt;- subset(gwas_LMISS, select = c(&quot;SNP&quot;, &quot;callrate&quot;)) gwas_assoc_subfrqlmiss &lt;- merge(gwas_assoc_subfrq, temp, by = &quot;SNP&quot;) head(gwas_assoc_subfrqlmiss) ## SNP CHR BP A1 NMISS OR STAT P A2 MAF NCHROBS ## 1: rs10000010 4 21227772 C 3996 1.0420 0.9010 0.36760 T 0.4258 7992 ## 2: rs10000023 4 95952929 T 3957 0.9902 -0.2160 0.82900 G 0.4841 7914 ## 3: rs10000030 4 103593179 A 3991 0.9779 -0.3696 0.71170 G 0.1616 7982 ## 4: rs1000007 2 237416793 C 4000 1.0180 0.3649 0.71520 T 0.3122 8000 ## 5: rs10000092 4 21504615 C 3963 0.9240 -1.6770 0.09354 T 0.3430 7926 ## 6: rs10000121 4 157793485 G 3919 0.9665 -0.7525 0.45170 A 0.4532 7838 ## callrate ## 1: 0.99900 ## 2: 0.98925 ## 3: 0.99775 ## 4: 1.00000 ## 5: 0.99075 ## 6: 0.97975 # Remember: # - that z = beta/se # - beta = log(OR), because log is the natural log in r gwas_assoc_subfrqlmiss$BETA = log(gwas_assoc_subfrqlmiss$OR) gwas_assoc_subfrqlmiss$SE = gwas_assoc_subfrqlmiss$BETA/gwas_assoc_subfrqlmiss$STAT gwas_assoc_subfrqlmiss_tib &lt;- dplyr::as_tibble(gwas_assoc_subfrqlmiss) col_order &lt;- c(&quot;SNP&quot;, &quot;CHR&quot;, &quot;BP&quot;, &quot;A1&quot;, &quot;A2&quot;, &quot;MAF&quot;, &quot;callrate&quot;, &quot;NMISS&quot;, &quot;NCHROBS&quot;, &quot;BETA&quot;, &quot;SE&quot;, &quot;OR&quot;, &quot;STAT&quot;, &quot;P&quot;) gwas_assoc_compl &lt;- gwas_assoc_subfrqlmiss_tib[, col_order] dim(gwas_assoc_compl) ## [1] 306102 14 head(gwas_assoc_compl) ## # A tibble: 6 × 14 ## SNP CHR BP A1 A2 MAF callrate NMISS NCHROBS BETA SE ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 rs10000… 4 2.12e7 C T 0.426 0.999 3996 7992 0.0411 0.0457 ## 2 rs10000… 4 9.60e7 T G 0.484 0.989 3957 7914 -0.00985 0.0456 ## 3 rs10000… 4 1.04e8 A G 0.162 0.998 3991 7982 -0.0223 0.0605 ## 4 rs10000… 2 2.37e8 C T 0.312 1 4000 8000 0.0178 0.0489 ## 5 rs10000… 4 2.15e7 C T 0.343 0.991 3963 7926 -0.0790 0.0471 ## 6 rs10000… 4 1.58e8 G A 0.453 0.980 3919 7838 -0.0341 0.0453 ## # … with 3 more variables: OR &lt;dbl&gt;, STAT &lt;dbl&gt;, P &lt;dbl&gt; Let’s list the number of SNPs per chromosome. # Number of SNPs per chromosome knitr::kable(table(gwas_assoc_compl$CHR)) Var1 Freq 1 23173 2 25206 3 21402 4 19008 5 19157 6 20672 7 16581 8 18089 9 15709 10 15536 11 14564 12 14889 13 11524 14 9822 15 8838 16 8920 17 8262 18 10356 19 5820 20 7792 21 5412 22 5370 gwas_threshold = -log10(5e-8) qq(gwas_assoc_compl$P, main = &quot;QQ plot of GWAS&quot;, xlim = c(0, 7), ylim = c(0, 12), pch = 20, col = uithof_color[16], cex = 1.5, las = 1, bty = &quot;n&quot;) abline(h = gwas_threshold, col = uithof_color[25], lty = &quot;dashed&quot;) 7.1 Manhattan plots We also need to create a Manhattan plot to display the association test P-values as a function of chromosomal location and thus provide a visual summary of association test results that draw immediate attention to any regions of significance. manhattan(gwas_assoc_compl, main = &quot;Manhattan Plot&quot;, ylim = c(0, 12), cex = 0.6, cex.axis = 0.9, col = c(&quot;#1290D9&quot;, &quot;#49A01D&quot;)) gwas_assoc_complsub &lt;- subset(gwas_assoc_compl, select = c(&quot;SNP&quot;, &quot;CHR&quot;, &quot;BP&quot;, &quot;P&quot;)) 7.2 Other plots It is also informative to plot the density per chromosome. We can use the CMplot for that which you can find here. For now we just make these graphs ‘quick-n-dirty’, you can further prettify them, but you easily loose track of time, so maybe carry on. CMplot(gwas_assoc_complsub, plot.type = &quot;d&quot;, bin.size = 1e6, col = c(&quot;darkgreen&quot;, &quot;yellow&quot;, &quot;red&quot;), file = &quot;jpg&quot;, memo = &quot;&quot;, dpi = 300, file.output = FALSE, verbose = TRUE) ## SNP-Density Plotting. CMplot(gwas_assoc_complsub, plot.type = &quot;m&quot;, LOG10 = TRUE, ylim = NULL, threshold = c(1e-6,1e-4), threshold.lty = c(1,2), threshold.lwd = c(1,1), threshold.col = c(&quot;black&quot;, &quot;grey&quot;), amplify = TRUE, bin.size = 1e6, chr.den.col = c(&quot;darkgreen&quot;, &quot;yellow&quot;, &quot;red&quot;), signal.col = c(&quot;red&quot;, &quot;green&quot;), signal.cex = c(1,1), signal.pch = c(19,19), file = &quot;jpg&quot;, memo = &quot;&quot;, dpi = 300, file.output = FALSE, verbose = TRUE) ## Rectangular-Manhattan Plotting P. CMplot(gwas_assoc_complsub, plot.type = &quot;b&quot;, LOG10 = TRUE, ylim = NULL, threshold = c(1e-6,1e-4), threshold.lty = c(1,2), threshold.lwd = c(1,1), threshold.col = c(&quot;black&quot;, &quot;grey&quot;), amplify = TRUE, bin.size = 1e6, chr.den.col = c(&quot;darkgreen&quot;, &quot;yellow&quot;, &quot;red&quot;), signal.col = c(&quot;red&quot;, &quot;green&quot;), signal.cex = c(1,1), signal.pch = c(19,19), file = &quot;jpg&quot;, memo = &quot;&quot;, dpi = 300, file.output = FALSE, verbose = TRUE) ## SNP-Density Plotting. ## Circular-Manhattan Plotting P. ## Rectangular-Manhattan Plotting P. ## QQ Plotting P. 7.3 Interactive plots You can also make an interactive version of the Manhattan - just because you can. The code below shows you how. library(plotly) library(dplyr) # Prepare the dataset (as an example we use the data (gwasResults) from the `qqman`-package) don &lt;- gwasResults %&gt;% # Compute chromosome size group_by(CHR) %&gt;% summarise(chr_len=max(BP)) %&gt;% # Calculate cumulative position of each chromosome mutate(tot=cumsum(chr_len)-chr_len) %&gt;% select(-chr_len) %&gt;% # Add this info to the initial dataset left_join(gwasResults, ., by=c(&quot;CHR&quot;=&quot;CHR&quot;)) %&gt;% # Add a cumulative position of each SNP arrange(CHR, BP) %&gt;% mutate( BPcum=BP+tot) %&gt;% # Add highlight and annotation information mutate( is_highlight=ifelse(SNP %in% snpsOfInterest, &quot;yes&quot;, &quot;no&quot;)) %&gt;% # Filter SNP to make the plot lighter filter(-log10(P)&gt;0.5) # Prepare X axis axisdf &lt;- don %&gt;% group_by(CHR) %&gt;% summarize(center=( max(BPcum) + min(BPcum) ) / 2 ) # Prepare text description for each SNP: don$text &lt;- paste(&quot;SNP: &quot;, don$SNP, &quot;\\nPosition: &quot;, don$BP, &quot;\\nChromosome: &quot;, don$CHR, &quot;\\nLOD score:&quot;, -log10(don$P) %&gt;% round(2), &quot;\\nWhat else do you wanna know&quot;, sep=&quot;&quot;) # Make the plot p &lt;- ggplot(don, aes(x=BPcum, y=-log10(P), text=text)) + # Show all points geom_point( aes(color=as.factor(CHR)), alpha=0.8, size=1.3) + scale_color_manual(values = rep(c(&quot;grey&quot;, &quot;skyblue&quot;), 22 )) + # custom X axis: scale_x_continuous( label = axisdf$CHR, breaks= axisdf$center ) + scale_y_continuous(expand = c(0, 0), ylim = c(0,9) ) + # remove space between plot area and x axis # Add highlighted points geom_point(data=subset(don, is_highlight==&quot;yes&quot;), color=&quot;orange&quot;, size=2) + # Custom the theme: theme_bw() + theme( legend.position=&quot;none&quot;, panel.border = element_blank(), panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank() ) ggplotly(p, tooltip=&quot;text&quot;) It will produce something like this. Again, this is an example with dummy data - you can try to do it for our GWAS, but careful with the time. You can also choose to carry on. 7.4 Regional association plots We can further visualise regions of interest using a package like LocusZoom. But first we need to find the independent hits by clumping the results. We will just use the defaults, but please take a note of all the options here https://www.cog-genomics.org/plink/1.9/postproc#clump plink --bfile gwas/gwa --clump gwas/data.assoc.logistic --clump-p1 5e-8 --clump-p2 0.05 --clump-kb 500 --clump-r2 0.05 --clump-verbose --out gwas/data.assoc.logistic Now you will have a list of all the independent SNPs, i.e. the genetic loci, that are associated to the trait. cat gwas/data.assoc.logistic.clumped ROOTDIR=&quot;/Users/swvanderlaan/Desktop/practical&quot; # change this to your root cat $ROOTDIR/gwas/data.assoc.logistic.clumped ## ## CHR F SNP BP P TOTAL NSIG S05 S01 S001 S0001 ## 3 1 rs6802898 12366207 4.18e-20 50 35 4 2 1 8 ## ## KB RSQ ALLELES F P ## (INDEX) rs6802898 0 1.000 T 1 4.18e-20 ## ## rs305500 -400 0.0588 TC/CA 1 0.0476 ## rs420014 -394 0.0552 TA/CG 1 0.015 ## rs305494 -392 0.0681 TG/CA 1 0.025 ## rs438129 -383 0.0721 TT/CC 1 0.0126 ## rs7615580 -364 0.309 TC/CT 1 2.05e-08 ## rs307560 -298 0.153 TT/CC 1 1.68e-06 ## rs11720130 -235 0.0838 TA/CG 1 0.00218 ## rs7616006 -124 0.0831 TA/CG 1 5.25e-05 ## rs6775191 -119 0.0506 TG/CA 1 0.000182 ## rs167466 -110 0.0523 TT/CC 1 0.00222 ## rs12635120 -86.6 0.332 TG/CA 1 2.77e-07 ## rs6798713 -85.6 0.288 TC/CT 1 2.01e-06 ## rs2920500 -67.8 0.102 TA/CG 1 6.59e-05 ## rs6768587 -53.1 0.295 TG/CA 1 3.36e-08 ## rs2028760 -18.3 0.305 TA/CG 1 3.67e-08 ## ## RANGE: chr3:11966007..12366207 ## SPAN: 400kb ## ## ------------------------------------------------------------------ ## ## ## CHR F SNP BP P TOTAL NSIG S05 S01 S001 S0001 ## 10 1 rs7901695 114744078 6.78e-12 32 24 2 1 1 4 ## ## KB RSQ ALLELES F P ## (INDEX) rs7901695 0 1.000 C 1 6.78e-12 ## ## rs7917983 -21.2 0.0589 CC/TT 1 0.046 ## rs7895307 -10.1 0.0819 CG/TA 1 0.00592 ## rs7903146 4.26 0.784 CT/TC 1 3.25e-08 ## rs7904519 19.8 0.582 CG/TA 1 2.89e-08 ## rs11196192 28.2 0.162 CG/TT 1 0.0268 ## rs10885409 54 0.502 CC/TT 1 8.35e-06 ## rs12255372 54.8 0.624 CT/TG 1 1.55e-06 ## rs4918789 67.7 0.24 CG/TT 1 0.000248 ## ## RANGE: chr10:114722872..114811797 ## SPAN: 88kb ## ## ------------------------------------------------------------------ ## ## ## CHR F SNP BP P TOTAL NSIG S05 S01 S001 S0001 ## 16 1 rs8050136 52373776 1.52e-08 23 16 1 3 2 1 ## ## KB RSQ ALLELES F P ## (INDEX) rs8050136 0 1.000 A 1 1.52e-08 ## ## rs7205986 -61.1 0.226 AG/CA 1 0.0434 ## rs6499640 -46.6 0.258 AA/CG 1 0.00367 ## rs1861868 -25.9 0.15 AT/CC 1 0.0063 ## rs1075440 -25.4 0.162 AA/CG 1 0.00802 ## rs3751812 2.18 0.994 AT/CG 1 1.63e-08 ## rs7190492 12.5 0.258 AG/CA 1 0.0007 ## rs8044769 22.9 0.524 AC/CT 1 0.000611 ## ## RANGE: chr16:52312647..52396636 ## SPAN: 83kb ## ## ------------------------------------------------------------------ Clumping identifies three loci and now that you know them, you can visualize them using LocusZoom. First, let’s get what we need (SNP and P) and gzip the results. echo &quot;SNP P&quot; &gt; gwas/data.assoc.logistic.locuszoom cat gwas/data.assoc.logistic | awk &#39;$5==&quot;ADD&quot;&#39; | awk &#39;{ print $2, $9 }&#39; &gt;&gt; gwas/data.assoc.logistic.locuszoom gzip -v gwas/data.assoc.logistic.locuszoom Now you are ready to upload this data.assoc.logistic.locuszoom.gz file to the site: http://locuszoom.org. Try to visualize each locus using the information above and by following the instructions. Choose HapMap 2, hg18, CEU as the LD-reference. You should get something like below. You will encounter the above three types of visualizations in any high-quality GWAS paper, because each is so critically informative. Usually, analysts of large-scale meta-analyses of GWAS will also stratify the QQ-plots based on the imputation quality (if your GWAS was imputed), call rate, and allele frequency. 7.5 Stop playing around Alright. It’s time to stop playing around and do a quick recap of what you’ve learned. You learned how to convert datasets. You learned how to execute sample QC and create diagnostic graphics You learned how to do the same for SNP QC You learned how to execute an association study given a dataset, covariates, and different assumptions regarding the genetic model. You learned how to visualize results and played around with different visuals. You should be ready for the real stuff. And if not, the next chapter will help you get ready: (Chapter @ref(wtccc1_intro)). "],["the-welcome-trust-case-control-consortium-wtccc.html", "Chapter 8 The Welcome Trust Case-Control Consortium (WTCCC) 8.1 There you go", " Chapter 8 The Welcome Trust Case-Control Consortium (WTCCC) Now that you know your way around PLINK, bash and r and have done some basic quality control and association testing, you are ready for the real thing. We have prepared a real dataset: the first release of the Welcome Trust Case-Control Consortium (WTCCC) on coronary artery disease (CAD) and a control dataset used for that project. The WTCCC1 data were genotyped using a chip from Affymetrix, nowadays part of ThermoFisher. As a brand Affymetrix still exists, but the chips aren’t made anymore. However, you can still find more information about the 500K chip that was used for WTCCC1. It’s good practice to read up a bit on what chip was used, and what support materials are available. Before quality control the original data included: CAD cohort, n ± 2,000 Healthy controls, from the UK 1958 birth control cohort, n ± 1,500 (we won’t use this) Healthy controls, from the UK National Blood Service, n ± 1,500. Your assignment is to do the following: Explore the individual datasets by calculating some statistics and visualising these. Merge the datasets in the folder wtccc1. Calculate PCs using smartPCA. Perform an association test using available covariates. Visualize the results. Identify independent SNPs. Make regional association plots. 8.1 There you go As I wrote, you are ready for the real stuff in (Chapter ??). "],["wtccc1-a-gwas-on-coronary-artery-disease-cad.html", "Chapter 9 WTCCC1: a GWAS on coronary artery disease (CAD) 9.1 Quality control 9.2 Ancestral background 9.3 Association testing 9.4 Replication!", " Chapter 9 WTCCC1: a GWAS on coronary artery disease (CAD) As usual, we start by exploring the data in hand. plink --bfile wtccc1/CADn1871_500Kb37fwd --bmerge wtccc1/UKBSn1397_500Kb37fwd --make-bed --out wtccc1/wtccc1 &amp;&amp; \\ plink --bfile wtccc1/wtccc1 --freq --out wtccc1/wtccc1 &amp;&amp; \\ plink --bfile wtccc1/wtccc1 --hardy --out wtccc1/wtccc1 &amp;&amp; \\ plink --bfile wtccc1/wtccc1 --missing --out wtccc1/wtccc1 &amp;&amp; \\ plink --bfile wtccc1/wtccc1 --test-missing --out wtccc1/wtccc1 cat wtccc1/wtccc1.missing | awk &#39;$5 &lt; 0.00001&#39; | awk &#39;{ print $2 }&#39; &gt; wtccc1/wtccc1-fail-diffmiss-qc.txt wtccc1_HWE &lt;- data.table::fread(paste0(COURSE_loc, &quot;/wtccc1/wtccc1.hwe&quot;)) wtccc1_FRQ &lt;- data.table::fread(paste0(COURSE_loc, &quot;/wtccc1/wtccc1.frq&quot;)) wtccc1_IMISS &lt;- data.table::fread(paste0(COURSE_loc, &quot;/wtccc1/wtccc1.imiss&quot;)) wtccc1_LMISS &lt;- data.table::fread(paste0(COURSE_loc, &quot;/wtccc1/wtccc1.lmiss&quot;)) wtccc1_HWE$logP &lt;- -log10(wtccc1_HWE$P) ggpubr::gghistogram(wtccc1_HWE, x = &quot;logP&quot;, add = &quot;mean&quot;, add.params = list(color = &quot;#595A5C&quot;, linetype = &quot;dashed&quot;, size = 1), rug = TRUE, # color = &quot;#1290D9&quot;, fill = &quot;#1290D9&quot;, color = &quot;TEST&quot;, fill = &quot;TEST&quot;, palette = &quot;lancet&quot;, facet.by = &quot;TEST&quot;, bins = 50, xlab = &quot;HWE -log10(P)&quot;) + geom_vline(xintercept = 5, linetype = &quot;dashed&quot;, color = &quot;#E55738&quot;, size = 1) ggpubr::gghistogram(wtccc1_FRQ, x = &quot;MAF&quot;, add = &quot;mean&quot;, add.params = list(color = &quot;#595A5C&quot;, linetype = &quot;dashed&quot;, size = 1), rug = TRUE, color = &quot;#1290D9&quot;, fill = &quot;#1290D9&quot;, xlab = &quot;minor allele frequency&quot;) + geom_vline(xintercept = 0.05, linetype = &quot;dashed&quot;, color = &quot;#E55738&quot;, size = 1) ## Warning: Using `bins = 30` by default. Pick better value with the argument ## `bins`. ## Warning: geom_vline(): Ignoring `mapping` because `xintercept` was provided. ## Warning: geom_vline(): Ignoring `data` because `xintercept` was provided. wtccc1_IMISS$callrate &lt;- 1 - wtccc1_IMISS$F_MISS ggpubr::gghistogram(wtccc1_IMISS, x = &quot;callrate&quot;, add = &quot;mean&quot;, add.params = list(color = &quot;#595A5C&quot;, linetype = &quot;dashed&quot;, size = 1), rug = TRUE, bins = 50, color = &quot;#1290D9&quot;, fill = &quot;#1290D9&quot;, xlab = &quot;per sample call rate&quot;) + geom_vline(xintercept = 0.95, linetype = &quot;dashed&quot;, color = &quot;#E55738&quot;, size = 1) ## Warning: geom_vline(): Ignoring `mapping` because `xintercept` was provided. ## Warning: geom_vline(): Ignoring `data` because `xintercept` was provided. wtccc1_LMISS$callrate &lt;- 1 - wtccc1_LMISS$F_MISS ggpubr::gghistogram(wtccc1_LMISS, x = &quot;callrate&quot;, add = &quot;mean&quot;, add.params = list(color = &quot;#595A5C&quot;, linetype = &quot;dashed&quot;, size = 1), rug = TRUE, bins = 50, color = &quot;#1290D9&quot;, fill = &quot;#1290D9&quot;, xlab = &quot;per SNP call rate&quot;) + geom_vline(xintercept = 0.95, linetype = &quot;dashed&quot;, color = &quot;#E55738&quot;, size = 1) ## Warning: geom_vline(): Ignoring `mapping` because `xintercept` was provided. ## Warning: geom_vline(): Ignoring `data` because `xintercept` was provided. 9.1 Quality control Now that we have handle on the data, we can filter it. Do you have any thoughts on that? Do you agree with the filters I set below? How would you do it differently and why? plink --bfile wtccc1/wtccc1 --exclude wtccc1/wtccc1-fail-diffmiss-qc.txt --maf 0.01 --geno 0.05 --hwe 0.00001 --make-bed --out wtccc1/wtccc1_clean 9.2 Ancestral background If these individuals are all from the United Kingdom, we are certain there will be admixture from other populations given UK’s history. Let’s project the WTCCC1 data on 1000G phase 1 populations. 9.2.1 Extreme cleaning For PCA we need to perform extreme clean. plink --bfile wtccc1/wtccc1_clean --maf 0.1 --geno 0.1 --indep-pairwise 100 50 0.2 --exclude rawdata/exclude_problematic_range.txt --make-bed --out wtccc1/wtccc1_temp plink --bfile wtccc1/wtccc1_temp --exclude wtccc1/wtccc1_temp.prune.out --make-bed --out wtccc1/wtccc1_extrclean rm -v wtccc1/wtccc1_temp* cat wtccc1/wtccc1_extrclean.bim | awk &#39;{ print $2 }&#39; &gt; wtccc1/wtccc1_extrclean.variants.txt cat wtccc1/wtccc1.bim | grep &quot;rs&quot; &gt; wtccc1/all.variants.txt plink --bfile reference/1kg_phase1_all/1kg_phase1_all --extract wtccc1/all.variants.txt --make-bed --out reference/1kg_phase1_all/1kg_phase1_wtccc1 cat reference/1kg_phase1_all/1kg_phase1_wtccc1.bim | \\ awk &#39;($5 == &quot;A&quot; &amp;&amp; $6 == &quot;T&quot;) || ($5 == &quot;T&quot; &amp;&amp; $6 == &quot;A&quot;) || ($5 == &quot;C&quot; &amp;&amp; $6 == &quot;G&quot;) || ($5 == &quot;G&quot; &amp;&amp; $6 == &quot;C&quot;)&#39; | awk &#39;{ print $2, $1, $4, $3, $5, $6 }&#39; \\ &gt; reference/1kg_phase1_all/all.1kg_wtccc1.atcg.variants.txt plink --bfile reference/1kg_phase1_all/1kg_phase1_wtccc1 --exclude reference/1kg_phase1_all/all.1kg_wtccc1.atcg.variants.txt --make-bed --out reference/1kg_phase1_all/1kg_phase1_wtccc1_no_atcg plink --bfile reference/1kg_phase1_all/1kg_phase1_wtccc1_no_atcg --extract wtccc1/wtccc1_extrclean.variants.txt --make-bed --out reference/1kg_phase1_all/1kg_phase1_raw_no_atcg_wtccc1 plink --bfile wtccc1/wtccc1_extrclean --bmerge reference/1kg_phase1_all/1kg_phase1_raw_no_atcg_wtccc1 --maf 0.1 --geno 0.1 --exclude rawdata/exclude_problematic_range.txt --make-bed --out wtccc1/wtccc1_extrclean_1kg cp -v wtccc1/wtccc1_extrclean_1kg.bim wtccc1/wtccc1_extrclean_1kg.pedsnp cp -v wtccc1/wtccc1_extrclean_1kg.fam wtccc1/wtccc1_extrclean_1kg.pedind Now that the cleaning is done, we can execute the actual PCA. perl ~/git/EIG/bin/smartpca.perl \\ -i wtccc1/wtccc1_extrclean_1kg.bed \\ -a wtccc1/wtccc1_extrclean_1kg.pedsnp \\ -b wtccc1/wtccc1_extrclean_1kg.pedind \\ -k 10 \\ -o wtccc1/wtccc1_extrclean_1kg.pca \\ -p wtccc1/wtccc1_extrclean_1kg.plot \\ -e wtccc1/wtccc1_extrclean_1kg.eval \\ -l wtccc1/wtccc1_extrclean_1kg.log \\ -m 5 \\ -t 10 \\ -s 6.0 \\ -w reference/1kg_phase1_all/1kg-pca-populations.txt And we should visualize the PCA results: are these individuals really all from European (UK) ancestry? PCA_WTCCC1_1kG &lt;- data.table::fread(paste0(COURSE_loc,&quot;/wtccc1/wtccc1_extrclean_1kg.pca.evec&quot;), header = FALSE, skip = 1) # Population Description Super population Code Counts # ASW African Ancestry in Southwest US AFR 4 #49A01D # CEU Utah residents with Northern and Western European ancestry EUR 7 #E55738 # CHB Han Chinese in Bejing, China EAS 8 #9A3480 # CHS Southern Han Chinese, China EAS 9 #705296 # CLM Colombian in Medellin, Colombia MR 10 #8D5B9A # FIN Finnish in Finland EUR 12 #2F8BC9 # GBR British in England and Scotland EUR 13 #1290D9 # IBS Iberian populations in Spain EUR 16 #1396D8 # JPT Japanese in Tokyo, Japan EAS 18 #D5267B # LWK Luhya in Webuye, Kenya AFR 20 #78B113 # MXL Mexican Ancestry in Los Angeles, California AMR 22 #F59D10 # PUR Puerto Rican in Puerto Rico AMR 25 #FBB820 # TSI Toscani in Italy EUR 27 #4C81BF # YRI Yoruba in Ibadan, Nigeria AFR 28 #C5D220 PCA_WTCCC1_1kG$V12[PCA_WTCCC1_1kG$V12 == &quot;2&quot;] &lt;- &quot;CAD&quot; PCA_WTCCC1_1kG$V12[PCA_WTCCC1_1kG$V12 == &quot;1&quot;] &lt;- &quot;UKBS&quot; PCA_WTCCC1_1kG$V12[PCA_WTCCC1_1kG$V12 == &quot;4&quot;] &lt;- &quot;ASW&quot; PCA_WTCCC1_1kG$V12[PCA_WTCCC1_1kG$V12 == &quot;7&quot;] &lt;- &quot;CEU&quot; PCA_WTCCC1_1kG$V12[PCA_WTCCC1_1kG$V12 == &quot;8&quot;] &lt;- &quot;CHB&quot; PCA_WTCCC1_1kG$V12[PCA_WTCCC1_1kG$V12 == &quot;9&quot;] &lt;- &quot;CHS&quot; PCA_WTCCC1_1kG$V12[PCA_WTCCC1_1kG$V12 == &quot;10&quot;] &lt;- &quot;CLM&quot; PCA_WTCCC1_1kG$V12[PCA_WTCCC1_1kG$V12 == &quot;12&quot;] &lt;- &quot;FIN&quot; PCA_WTCCC1_1kG$V12[PCA_WTCCC1_1kG$V12 == &quot;13&quot;] &lt;- &quot;GBR&quot; PCA_WTCCC1_1kG$V12[PCA_WTCCC1_1kG$V12 == &quot;16&quot;] &lt;- &quot;IBS&quot; PCA_WTCCC1_1kG$V12[PCA_WTCCC1_1kG$V12 == &quot;18&quot;] &lt;- &quot;JPT&quot; PCA_WTCCC1_1kG$V12[PCA_WTCCC1_1kG$V12 == &quot;20&quot;] &lt;- &quot;LWK&quot; PCA_WTCCC1_1kG$V12[PCA_WTCCC1_1kG$V12 == &quot;22&quot;] &lt;- &quot;MXL&quot; PCA_WTCCC1_1kG$V12[PCA_WTCCC1_1kG$V12 == &quot;25&quot;] &lt;- &quot;PUR&quot; PCA_WTCCC1_1kG$V12[PCA_WTCCC1_1kG$V12 == &quot;27&quot;] &lt;- &quot;TSI&quot; PCA_WTCCC1_1kG$V12[PCA_WTCCC1_1kG$V12 == &quot;28&quot;] &lt;- &quot;YRI&quot; PCA_WTCCC1_1kGplot &lt;- ggpubr::ggscatter(PCA_WTCCC1_1kG, x = &quot;V2&quot;, y = &quot;V3&quot;, color = &quot;V12&quot;, palette = c(&quot;#49A01D&quot;, &quot;#595A5C&quot;, &quot;#E55738&quot;, &quot;#9A3480&quot;, &quot;#705296&quot;, &quot;#8D5B9A&quot;, &quot;#2F8BC9&quot;, &quot;#1290D9&quot;, &quot;#1396D8&quot;, &quot;#D5267B&quot;, &quot;#78B113&quot;, &quot;#F59D10&quot;, &quot;#FBB820&quot;, &quot;#4C81BF&quot;, &quot;#595A5C&quot;, &quot;#C5D220&quot;), xlab = &quot;principal component 1&quot;, ylab = &quot;principal component 2&quot;) + geom_hline(yintercept = 0.023, linetype = &quot;dashed&quot;, color = &quot;#595A5C&quot;, size = 1) ggpubr::ggpar(PCA_WTCCC1_1kGplot, title = &quot;Principal Component Analysis&quot;, subtitle = &quot;Reference population: 1000 G, phase 1&quot;, legend.title = &quot;Populations&quot;, legend = &quot;right&quot;) 9.2.2 Removing samples In a similar fashion as in the example gwas and rawdata datasets, you should consider to remove the samples below the threshold based on this PCA. Go ahead, try that. You’re code would be something like below: cat wtccc1/wtccc1_extrclean_1kg.pca.evec | tail -n +2 | \\ awk &#39;$3 &lt; 0.023&#39; | awk &#39;{ print $1 }&#39; | awk -F&quot;:&quot; &#39;{ print $1, $2 }&#39; &gt; wtccc1/fail-ancestry-QC.txt plink --bfile wtccc1/wtccc1_clean --exclude wtccc1/fail-ancestry-QC.txt --make-bed --out wtccc1/wtccc1_qc 9.3 Association testing Now that we have explored the data, we are ready for some simple association testing. However, it would be great to have some PCs to correct for. We can use PLINK for that too. plink --bfile wtccc1/wtccc1_extrclean --exclude wtccc1/fail-ancestry-QC.txt --pca --out wtccc1/wtccc1_extrclean Let’s add those PCs to the covariates-file. echo &quot;IID PC1 PC2 PC3 PC4 PC5 PC6 PC7 PC8 PC9 PC10 PC11 PC12 PC13 PC14 PC15 PC16 PC17 PC18 PC19 PC20&quot; &gt; wtccc1/wtccc1_qc.pca cat wtccc1/wtccc1_extrclean.eigenvec | awk &#39;{ print $2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22}&#39; &gt;&gt; wtccc1/wtccc1_qc.pca perl scripts/mergeTables.pl --file1 wtccc1/wtccc1_qc.pca --file2 wtccc1/wtccc1.covar --index IID --format NORM &gt; wtccc1/wtccc1_qc.covar_pca Exciting, now we are ready to perform a GWAS on CAD in WTCCC1. plink --bfile wtccc1/wtccc1_qc --logistic sex --covar wtccc1/wtccc1_qc.covar_pca --out wtccc1/wtccc1_qc_log_covar_pca wtccc1_assoc &lt;- data.table::fread(paste0(COURSE_loc, &quot;/wtccc1/wtccc1_qc_log_covar_pca.assoc.logistic&quot;)) dim(wtccc1_assoc) ## [1] 8726361 9 wtccc1_assoc[1:9, 1:9] ## CHR SNP BP A1 TEST NMISS OR STAT P ## 1: 1 rs3094315 752566 G ADD 3256 1.036e+00 0.37270 7.094e-01 ## 2: 1 rs3094315 752566 G age_recruitment 3256 4.351e+00 25.96000 1.471e-148 ## 3: 1 rs3094315 752566 G PC1 3256 1.909e+01 1.11300 2.657e-01 ## 4: 1 rs3094315 752566 G PC2 3256 1.009e-01 -0.87060 3.840e-01 ## 5: 1 rs3094315 752566 G PC3 3256 1.842e-01 -0.62560 5.316e-01 ## 6: 1 rs3094315 752566 G PC4 3256 7.391e-01 -0.11110 9.116e-01 ## 7: 1 rs3094315 752566 G PC5 3256 1.817e-01 -0.63400 5.261e-01 ## 8: 1 rs3094315 752566 G PC6 3256 9.170e-01 -0.03229 9.742e-01 ## 9: 1 rs3094315 752566 G PC7 3256 1.839e+04 3.61000 3.057e-04 wtccc1_assoc_sub &lt;- subset(wtccc1_assoc, TEST == &quot;ADD&quot;) wtccc1_assoc_sub$TEST &lt;- NULL temp &lt;- subset(wtccc1_FRQ, select = c(&quot;SNP&quot;, &quot;A2&quot;, &quot;MAF&quot;, &quot;NCHROBS&quot;)) wtccc1_assoc_subfrq &lt;- merge(wtccc1_assoc_sub, temp, by = &quot;SNP&quot;) temp &lt;- subset(wtccc1_LMISS, select = c(&quot;SNP&quot;, &quot;callrate&quot;)) wtccc1_assoc_subfrqlmiss &lt;- merge(wtccc1_assoc_subfrq, temp, by = &quot;SNP&quot;) head(wtccc1_assoc_subfrqlmiss) ## SNP CHR BP A1 NMISS OR STAT P A2 MAF NCHROBS ## 1: rs10000012 4 1357325 G 3265 1.0480 0.48180 0.6299 C 0.1345 6530 ## 2: rs1000002 3 183635768 T 3264 1.1100 1.55000 0.1212 C 0.4827 6528 ## 3: rs1000003 3 98342907 G 3232 1.0080 0.08926 0.9289 A 0.1454 6464 ## 4: rs10000033 4 139599898 C 3266 1.0070 0.10840 0.9137 T 0.4545 6532 ## 5: rs10000037 4 38924330 A 3267 1.1100 1.35900 0.1741 G 0.2557 6534 ## 6: rs10000062 4 5254744 C 3266 0.8589 -1.59000 0.1119 G 0.1408 6532 ## callrate ## 1: 0.999082 ## 2: 0.998776 ## 3: 0.988980 ## 4: 0.999388 ## 5: 0.999694 ## 6: 0.999388 # Remember: # - that z = beta/se # - beta = log(OR), because log is the natural log in r wtccc1_assoc_subfrqlmiss$BETA = log(wtccc1_assoc_subfrqlmiss$OR) wtccc1_assoc_subfrqlmiss$SE = wtccc1_assoc_subfrqlmiss$BETA/wtccc1_assoc_subfrqlmiss$STAT wtccc1_assoc_subfrqlmiss_tib &lt;- dplyr::as_tibble(wtccc1_assoc_subfrqlmiss) col_order &lt;- c(&quot;SNP&quot;, &quot;CHR&quot;, &quot;BP&quot;, &quot;A1&quot;, &quot;A2&quot;, &quot;MAF&quot;, &quot;callrate&quot;, &quot;NMISS&quot;, &quot;NCHROBS&quot;, &quot;BETA&quot;, &quot;SE&quot;, &quot;OR&quot;, &quot;STAT&quot;, &quot;P&quot;) wtccc1_assoc_compl &lt;- wtccc1_assoc_subfrqlmiss_tib[, col_order] dim(wtccc1_assoc_compl) ## [1] 379407 14 head(wtccc1_assoc_compl) ## # A tibble: 6 × 14 ## SNP CHR BP A1 A2 MAF callrate NMISS NCHROBS BETA SE ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 rs10000… 4 1.36e6 G C 0.134 0.999 3265 6530 0.0469 0.0973 ## 2 rs10000… 3 1.84e8 T C 0.483 0.999 3264 6528 0.104 0.0673 ## 3 rs10000… 3 9.83e7 G A 0.145 0.989 3232 6464 0.00797 0.0893 ## 4 rs10000… 4 1.40e8 C T 0.454 0.999 3266 6532 0.00698 0.0644 ## 5 rs10000… 4 3.89e7 A G 0.256 1.00 3267 6534 0.104 0.0768 ## 6 rs10000… 4 5.25e6 C G 0.141 0.999 3266 6532 -0.152 0.0957 ## # … with 3 more variables: OR &lt;dbl&gt;, STAT &lt;dbl&gt;, P &lt;dbl&gt; wtccc1_assoc_complsub &lt;- subset(wtccc1_assoc_compl, select = c(&quot;SNP&quot;, &quot;CHR&quot;, &quot;BP&quot;, &quot;P&quot;)) # CMplot(wtccc1_assoc_complsub, # plot.type = &quot;d&quot;, # bin.size = 1e6, col = c(&quot;darkgreen&quot;, &quot;yellow&quot;, &quot;red&quot;), # file = &quot;jpg&quot;, memo = &quot;&quot;, dpi = 300, file.output = FALSE, verbose = TRUE) CMplot(wtccc1_assoc_complsub, plot.type = &quot;b&quot;, LOG10 = TRUE, ylim = NULL, threshold = c(1e-6,1e-4), threshold.lty = c(1,2), threshold.lwd = c(1,1), threshold.col = c(&quot;black&quot;, &quot;grey&quot;), amplify = TRUE, bin.size = 1e6, chr.den.col = c(&quot;darkgreen&quot;, &quot;yellow&quot;, &quot;red&quot;), signal.col = c(&quot;red&quot;, &quot;green&quot;), signal.cex = c(1,1), signal.pch = c(19,19), file = &quot;jpg&quot;, memo = &quot;&quot;, dpi = 300, file.output = FALSE, verbose = TRUE) ## SNP-Density Plotting. ## Circular-Manhattan Plotting P. ## Rectangular-Manhattan Plotting P. ## QQ Plotting P. 9.4 Replication! You reached an important milestone: you recreated the work by the whole WTCCC1-team that took them years in just one afternoon. Wow. Back then there wasn’t much on analyses after a GWAS, nowadays there are many post-GWAS analyses methods. We will cover them in the next (Chapter @ref(post_gwas)). "],["post-gwas-analyses.html", "Chapter 10 Post-GWAS Analyses 10.1 Replication!", " Chapter 10 Post-GWAS Analyses A critical step in post-GWAS analysis is probably ‘mapping SNPs to genes’. It is critical, but it is also the most challenging. How do you even map SNPs to genes? What criteria to use? Should we take into account physical position? Or is it of interest that certain SNPs might influence downstream or upstream gene expression? And what of the fact that most loci discovered in GWAS are _inter_genic? What is the heritability of our trait? Are there any pleiotropic effects? Researchers from the VUMC in Amsterdam have created an online tool that aids in mapping genes and function to GWAS: “Functional Mapping and Annotation of Genome-Wide Association Studies” a.k.a. FUMA. This online tool uses a variety of datasets and programs to prioritize genes and map these to associated loci. We have covered some aspects of post-GWAS analyses, and a lot are covered by FUMA. Let’s try and annotate our WTCCC1 results. This assignment will be a bit more Do It Yourself. 10.1 Replication! You reached an important milestone: you recreated the work by the whole WTCCC1 in just an afternoon. Wow. Back then there wasn’t much on analyses after a GWAS, nowadays there are many post-GWAS analyses methods. We will cover them in the next (Chapter @ref(conditional_analysis)). "],["conditional-analysis.html", "Chapter 11 Conditional analysis 11.1 Section 1 11.2 Section 2 11.3 Section 3 11.4 Replication!", " Chapter 11 Conditional analysis 11.1 Section 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. 11.2 Section 2 Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur? 11.3 Section 3 At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat. 11.4 Replication! You reached an important milestone: you recreated the work by the whole WTCCC1 in just an afternoon. Wow. Back then there wasn’t much on analyses after a GWAS, nowadays there are many post-GWAS analyses methods. We will cover them in the next (Chapter ??). "],["statistical-finemapping.html", "Chapter 12 Statistical finemapping 12.1 Section 1 12.2 Section 2 12.3 Section 3 12.4 Replication!", " Chapter 12 Statistical finemapping 12.1 Section 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. 12.2 Section 2 Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur? 12.3 Section 3 At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat. 12.4 Replication! You reached an important milestone: you recreated the work by the whole WTCCC1 in just an afternoon. Wow. Back then there wasn’t much on analyses after a GWAS, nowadays there are many post-GWAS analyses methods. We will cover them in the next (Chapter ??). "],["functional-mapping-and-annotation-of-gwas.html", "Chapter 13 Functional Mapping and Annotation of GWAS 13.1 Assignment 13.2 Some closing thoughts", " Chapter 13 Functional Mapping and Annotation of GWAS 13.1 Assignment 13.1.1 Tutorial Go to the FUMA website, get an account, and study the online-tutorial. 13.1.2 Create the input You will need to use the fwrite function in r to write the concatenated results of the WTCCC1 study (remember: wtccc1_assoc_compl). Question: can you figure out the sample size of the WTCCC1 data you used? You will need to compress the resulting output, this will make uploading to FUMA go faster. You can use the bash-program gzip for that. If you want to know what the options are for that program, you can use gzip -h 13.1.3 Run FUMA - SNP to gene Upload via the form on the FUMA-website. Since you’ve done the tutorial you are familiar with its options. Select everything in the tabs Gene Mapping (positional mapping), Gene Mapping (eQTL mapping) but not GTEx v6, and Gene Mapping (3D Chromatin Interaction mapping) and leave the settings at Gene types and MHC region as-is, and at MAGMA analysis set the MAGMA gene expression analysis to include all tissues, but GTEx v6. Don’t forget to give your analysis a name. This will take some time and so it’s a good moment to carry on with the rest of the practical or take a break, or study for the exam. Questions How many lead SNPs did we find? What do the results of MAGMA (the gene-based test) look like and how many genes pass the threshold of multiple testing correction? How many loci were mapped? How many genes were physically located and how many were mapped to these loci? Do you think all loci are ‘correct’, i.e. do you ‘believe’ all the signals looking at the mapping results? Why? For what tissues are the signals enriched? Are there any chromatin interactions discovered? 13.1.4 Run FUMA - Gene to function Now that you mapped SNPs to genes, it’s time to go back to ‘My Jobs’. Select your job and perform GENE2FUNC. Questions What genes show the lowest expression across tissues? And what genes the highest? For what pathways are the signals enriched? What molecular functions are mapped to the signals? 13.2 Some closing thoughts FUMA is a great tool, but it comes with a caveat. It includes a couple of references of which it is not readily clear which variants are included - the authors do provide the codes used on Git, but still, you don’t know which variants precisely are filtered. That is key: perhaps the top variant you discovered is filtered in the reference. This means FUMA will not use it to map SNPs to genes, rather next best variant. This should be in high-LD - but, again, assumptions… And of course, the references used might not match your data well enough. So, my advice: use FUMA (why not be lazy rather than work hard?), but aware of such caveats as I described. All in all, I do think FUMA is very complete, intuitive, and it makes your work publication-ready because it creates just the right file-formats for you too (.png, .svg, .pdf, .jpeg). That said, time to move on to inspect other phenotypes in relation to your findings in the next (Chapter ??). "],["phenome-wide-association-study-phewas.html", "Chapter 14 Phenome-Wide Association Study (PheWAS) 14.1 Section 1 14.2 Section 2 14.3 Section 3 14.4 Replication!", " Chapter 14 Phenome-Wide Association Study (PheWAS) 14.1 Section 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. 14.2 Section 2 Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur? 14.3 Section 3 At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat. 14.4 Replication! You reached an important milestone: you recreated the work by the whole WTCCC1 in just an afternoon. Wow. Back then there wasn’t much on analyses after a GWAS, nowadays there are many post-GWAS analyses methods. We will cover them in the next (Chapter @ref(mendelian_randomization)). "],["mendelian-randomization-mr.html", "Chapter 15 Mendelian Randomization (MR) 15.1 Section 1 15.2 Section 2 15.3 Section 3 15.4 Replication!", " Chapter 15 Mendelian Randomization (MR) 15.1 Section 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. 15.2 Section 2 Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur? 15.3 Section 3 At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat. 15.4 Replication! You reached an important milestone: you recreated the work by the whole WTCCC1 in just an afternoon. Wow. Back then there wasn’t much on analyses after a GWAS, nowadays there are many post-GWAS analyses methods. We will cover them in the next (Chapter ??). "],["mendelian-randomization-mr-1.html", "Chapter 16 Mendelian Randomization (MR) 16.1 Section 1 16.2 Section 2 16.3 Section 3 16.4 Replication!", " Chapter 16 Mendelian Randomization (MR) 16.1 Section 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. 16.2 Section 2 Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur? 16.3 Section 3 At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat. 16.4 Replication! You reached an important milestone: you recreated the work by the whole WTCCC1 in just an afternoon. Wow. Back then there wasn’t much on analyses after a GWAS, nowadays there are many post-GWAS analyses methods. We will cover them in the next (Chapter ??). "],["license-your-gitbook.html", "Chapter 17 License your GitBook", " Chapter 17 License your GitBook In the spirit of Open Science, it is good to think about making your course materials Open Source. That means that other people can use them. In principle, if you publish materials online without license information, you hold the copyright to those materials. If you want them to be Open Source, you must include a license. It is not always obvious what license to choose. The Creative Commons licenses are typically suitable for course materials. This GitBook, for example, is licensed under CC-BY 4.0. That means you can use and remix it as you like, but you must credit the original source. If your project is more focused on software or source code, consider using the GNU GPL v3 license instead. You can find more information about the Creative Commons Licenses here. Specific licenses that might be useful are: CC0 (“No Rights Reserved”), everybody can do what they want with your work. CC-BY 4.0 (“Attribution”), everybody can do what they want with your work, but they must credit you. Note that this license may not be suitable for software or source code! For compatibility between CC and GNU licenses, see this FAQ. "],["license-your-gitbook-1.html", "Chapter 18 License your GitBook", " Chapter 18 License your GitBook In the spirit of Open Science, it is good to think about making your course materials Open Source. That means that other people can use them. In principle, if you publish materials online without license information, you hold the copyright to those materials. If you want them to be Open Source, you must include a license. It is not always obvious what license to choose. The Creative Commons licenses are typically suitable for course materials. This GitBook, for example, is licensed under CC-BY 4.0. That means you can use and remix it as you like, but you must credit the original source. If your project is more focused on software or source code, consider using the GNU GPL v3 license instead. You can find more information about the Creative Commons Licenses here. Specific licenses that might be useful are: CC0 (“No Rights Reserved”), everybody can do what they want with your work. CC-BY 4.0 (“Attribution”), everybody can do what they want with your work, but they must credit you. Note that this license may not be suitable for software or source code! For compatibility between CC and GNU licenses, see this FAQ. "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
